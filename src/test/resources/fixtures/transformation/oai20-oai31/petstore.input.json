{
    "swagger": "2.0",
    "info": {
        "title": "Pet Store API",
        "version": "1.0.6",
        "description": "",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "email": "apiteam@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "https://www.apache.org/licenses/LICENSE-2.0"
        }
    },
    "host": "petstore.swagger.io",
    "basePath": "/v2",
    "schemes": [
        "https",
        "http"
    ],
    "paths": {
        "/pet/{petId}/uploadImage": {
            "post": {
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pet"
                ],
                "parameters": [
                    {
                        "name": "petId",
                        "description": "ID of pet to update",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "additionalMetadata",
                        "description": "Additional data to pass to server",
                        "in": "formData",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "file",
                        "description": "file to upload",
                        "in": "formData",
                        "required": false,
                        "type": "file"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    }
                },
                "security": [
                    {
                        "petstore_auth": [
                            "write:pets",
                            "read:pets"
                        ]
                    }
                ],
                "operationId": "uploadFile",
                "summary": "uploads an image",
                "description": ""
            }
        },
        "/pet": {
            "put": {
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "tags": [
                    "pet"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "description": "Pet object that needs to be added to the store",
                        "schema": {
                            "$ref": "#/definitions/Pet"
                        },
                        "in": "body",
                        "required": true
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Pet not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                },
                "security": [
                    {
                        "petstore_auth": [
                            "write:pets",
                            "read:pets"
                        ]
                    }
                ],
                "operationId": "updatePet",
                "summary": "Update an existing pet",
                "description": ""
            },
            "post": {
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "tags": [
                    "pet"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "description": "Pet object that needs to be added to the store",
                        "schema": {
                            "$ref": "#/definitions/Pet"
                        },
                        "in": "body",
                        "required": true
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "security": [
                    {
                        "petstore_auth": [
                            "write:pets",
                            "read:pets"
                        ]
                    }
                ],
                "operationId": "addPet",
                "summary": "Add a new pet to the store",
                "description": ""
            }
        },
        "/pet/findByStatus": {
            "get": {
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "tags": [
                    "pet"
                ],
                "parameters": [
                    {
                        "name": "status",
                        "description": "Status values that need to be considered for filter",
                        "in": "query",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string",
                            "default": "available",
                            "enum": [
                                "available",
                                "pending",
                                "sold"
                            ]
                        },
                        "collectionFormat": "multi"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Pet"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    }
                },
                "security": [
                    {
                        "petstore_auth": [
                            "write:pets",
                            "read:pets"
                        ]
                    }
                ],
                "operationId": "findPetsByStatus",
                "summary": "Finds Pets by status",
                "description": "Multiple status values can be provided with comma separated strings"
            }
        },
        "/pet/findByTags": {
            "get": {
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "tags": [
                    "pet"
                ],
                "parameters": [
                    {
                        "name": "tags",
                        "description": "Tags to filter by",
                        "in": "query",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Pet"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid tag value"
                    }
                },
                "deprecated": true,
                "security": [
                    {
                        "petstore_auth": [
                            "write:pets",
                            "read:pets"
                        ]
                    }
                ],
                "operationId": "findPetsByTags",
                "summary": "Finds Pets by tags",
                "description": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing."
            }
        },
        "/pet/{petId}": {
            "get": {
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "tags": [
                    "pet"
                ],
                "parameters": [
                    {
                        "name": "petId",
                        "description": "ID of pet to return",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Pet"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Pet not found"
                    }
                },
                "security": [
                    {
                        "api_key": [
                        ]
                    }
                ],
                "operationId": "getPetById",
                "summary": "Find pet by ID",
                "description": "Returns a single pet"
            },
            "post": {
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "tags": [
                    "pet"
                ],
                "parameters": [
                    {
                        "name": "petId",
                        "description": "ID of pet that needs to be updated",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "name",
                        "description": "Updated name of the pet",
                        "in": "formData",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "status",
                        "description": "Updated status of the pet",
                        "in": "formData",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "security": [
                    {
                        "petstore_auth": [
                            "write:pets",
                            "read:pets"
                        ]
                    }
                ],
                "operationId": "updatePetWithForm",
                "summary": "Updates a pet in the store with form data",
                "description": ""
            },
            "delete": {
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "tags": [
                    "pet"
                ],
                "parameters": [
                    {
                        "name": "api_key",
                        "in": "header",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "petId",
                        "description": "Pet id to delete",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Pet not found"
                    }
                },
                "security": [
                    {
                        "petstore_auth": [
                            "write:pets",
                            "read:pets"
                        ]
                    }
                ],
                "operationId": "deletePet",
                "summary": "Deletes a pet",
                "description": ""
            }
        },
        "/store/order": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "tags": [
                    "store"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "description": "order placed for purchasing the pet",
                        "schema": {
                            "$ref": "#/definitions/Order"
                        },
                        "in": "body",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Order"
                        }
                    },
                    "400": {
                        "description": "Invalid Order"
                    }
                },
                "operationId": "placeOrder",
                "summary": "Place an order for a pet",
                "description": ""
            }
        },
        "/store/order/{orderId}": {
            "get": {
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "tags": [
                    "store"
                ],
                "parameters": [
                    {
                        "name": "orderId",
                        "description": "ID of pet that needs to be fetched",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "format": "int64",
                        "maximum": 10,
                        "minimum": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Order"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                },
                "operationId": "getOrderById",
                "summary": "Find purchase order by ID",
                "description": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions"
            },
            "delete": {
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "tags": [
                    "store"
                ],
                "parameters": [
                    {
                        "name": "orderId",
                        "description": "ID of the order that needs to be deleted",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "format": "int64",
                        "minimum": 1
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                },
                "operationId": "deleteOrder",
                "summary": "Delete purchase order by ID",
                "description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors"
            }
        },
        "/store/inventory": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "store"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "format": "int32",
                                "type": "integer"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": [
                        ]
                    }
                ],
                "operationId": "getInventory",
                "summary": "Returns pet inventories by status",
                "description": "Returns a map of status codes to quantities"
            }
        },
        "/user/createWithArray": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "tags": [
                    "user"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "description": "List of user object",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/User"
                            }
                        },
                        "in": "body",
                        "required": true
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "operationId": "createUsersWithArrayInput",
                "summary": "Creates list of users with given input array",
                "description": ""
            }
        },
        "/user/createWithList": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "tags": [
                    "user"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "description": "List of user object",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/User"
                            }
                        },
                        "in": "body",
                        "required": true
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "operationId": "createUsersWithListInput",
                "summary": "Creates list of users with given input array",
                "description": ""
            }
        },
        "/user/{username}": {
            "get": {
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "tags": [
                    "user"
                ],
                "parameters": [
                    {
                        "name": "username",
                        "description": "The name that needs to be fetched. Use user1 for testing. ",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "400": {
                        "description": "Invalid username supplied"
                    },
                    "404": {
                        "description": "User not found"
                    }
                },
                "operationId": "getUserByName",
                "summary": "Get user by user name",
                "description": ""
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "tags": [
                    "user"
                ],
                "parameters": [
                    {
                        "name": "username",
                        "description": "name that need to be updated",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "description": "Updated user object",
                        "schema": {
                            "$ref": "#/definitions/User"
                        },
                        "in": "body",
                        "required": true
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid user supplied"
                    },
                    "404": {
                        "description": "User not found"
                    }
                },
                "operationId": "updateUser",
                "summary": "Updated user",
                "description": "This can only be done by the logged in user."
            },
            "delete": {
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "tags": [
                    "user"
                ],
                "parameters": [
                    {
                        "name": "username",
                        "description": "The name that needs to be deleted",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid username supplied"
                    },
                    "404": {
                        "description": "User not found"
                    }
                },
                "operationId": "deleteUser",
                "summary": "Delete user",
                "description": "This can only be done by the logged in user."
            }
        },
        "/user/login": {
            "get": {
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "tags": [
                    "user"
                ],
                "parameters": [
                    {
                        "name": "username",
                        "description": "The user name for login",
                        "in": "query",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "password",
                        "description": "The password for login in clear text",
                        "in": "query",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "headers": {
                            "X-Expires-After": {
                                "description": "date in UTC when token expires",
                                "type": "string",
                                "format": "date-time"
                            },
                            "X-Rate-Limit": {
                                "description": "calls per hour allowed by the user",
                                "type": "integer",
                                "format": "int32"
                            }
                        },
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid username/password supplied"
                    }
                },
                "operationId": "loginUser",
                "summary": "Logs user into the system",
                "description": ""
            }
        },
        "/user/logout": {
            "get": {
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "tags": [
                    "user"
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "operationId": "logoutUser",
                "summary": "Logs out current logged in user session",
                "description": ""
            }
        },
        "/user": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "tags": [
                    "user"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "description": "Created user object",
                        "schema": {
                            "$ref": "#/definitions/User"
                        },
                        "in": "body",
                        "required": true
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                },
                "operationId": "createUser",
                "summary": "Create user",
                "description": "This can only be done by the logged in user."
            }
        }
    },
    "definitions": {
        "ApiResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "format": "int32",
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "Category": {
            "type": "object",
            "properties": {
                "id": {
                    "format": "int64",
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            },
            "xml": {
                "name": "Category"
            }
        },
        "Pet": {
            "required": [
                "name",
                "photoUrls"
            ],
            "type": "object",
            "properties": {
                "id": {
                    "format": "int64",
                    "type": "integer"
                },
                "category": {
                    "$ref": "#/definitions/Category"
                },
                "name": {
                    "type": "string",
                    "example": "doggie"
                },
                "photoUrls": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "xml": {
                            "name": "photoUrl"
                        }
                    },
                    "xml": {
                        "wrapped": true
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Tag",
                        "xml": {
                            "name": "tag"
                        }
                    },
                    "xml": {
                        "wrapped": true
                    }
                },
                "status": {
                    "description": "pet status in the store",
                    "enum": [
                        "available",
                        "pending",
                        "sold"
                    ],
                    "type": "string"
                }
            },
            "xml": {
                "name": "Pet"
            }
        },
        "Tag": {
            "type": "object",
            "properties": {
                "id": {
                    "format": "int64",
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            },
            "xml": {
                "name": "Tag"
            }
        },
        "Order": {
            "type": "object",
            "properties": {
                "id": {
                    "format": "int64",
                    "type": "integer"
                },
                "petId": {
                    "format": "int64",
                    "type": "integer"
                },
                "quantity": {
                    "format": "int32",
                    "type": "integer"
                },
                "shipDate": {
                    "format": "date-time",
                    "type": "string"
                },
                "status": {
                    "description": "Order Status",
                    "enum": [
                        "placed",
                        "approved",
                        "delivered"
                    ],
                    "type": "string"
                },
                "complete": {
                    "type": "boolean"
                }
            },
            "xml": {
                "name": "Order"
            }
        },
        "User": {
            "type": "object",
            "properties": {
                "id": {
                    "format": "int64",
                    "type": "integer"
                },
                "username": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "userStatus": {
                    "format": "int32",
                    "description": "User Status",
                    "type": "integer"
                }
            },
            "xml": {
                "name": "User"
            }
        }
    },
    "securityDefinitions": {
        "api_key": {
            "type": "apiKey",
            "name": "api_key",
            "in": "header"
        },
        "petstore_auth": {
            "flow": "implicit",
            "authorizationUrl": "https://petstore.swagger.io/oauth/authorize",
            "scopes": {
                "read:pets": "read your pets",
                "write:pets": "modify pets in your account"
            },
            "type": "oauth2"
        }
    },
    "tags": [
        {
            "name": "pet",
            "description": "Everything about your Pets",
            "externalDocs": {
                "description": "Find out more",
                "url": "http://swagger.io"
            }
        },
        {
            "name": "store",
            "description": "Access to Petstore orders"
        },
        {
            "name": "user",
            "description": "Operations about user",
            "externalDocs": {
                "description": "Find out more about our store",
                "url": "http://swagger.io"
            }
        }
    ],
    "externalDocs": {
        "description": "Find out more about Swagger",
        "url": "http://swagger.io"
    }
}
