{
    "openapi": "3.0.2",
    "info": {
        "title": "Domino Keep PIM API (quattro)",
        "version": "0.4.0",
        "description": "Unified API for eMail, calendar, contacts and task for a HCL Domino backend",
        "contact": {
            "name": "Jason Roy Gary",
            "url": "https://mail.quattro.rocks",
            "email": "jason.roy.gary@hcl.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "https://www.apache.org/licenses/LICENSE-2.0"
        }
    },
    "servers": [
        {
            "url": "https://{yourserver}/api/pim-v1",
            "description": "1. Standard secure server"
        },
        {
            "url": "{protocol}://{yourserver}:{port}/api/pim-v1",
            "description": "2. Custom server",
            "variables": {
                "protocol": {
                    "default": "https"
                },
                "port": {
                    "default": "8880"
                },
                "yourserver": {
                    "default": "localhost",
                    "description": "Fully qualified domain name"
                }
            }
        }
    ],
    "paths": {
        "/addresslookup": {
            "summary": "Retrieve information from one or more addresssbooks",
            "get": {
                "tags": [
                    "mail"
                ],
                "parameters": [
                    {
                        "name": "count",
                        "description": "How many results shall be returned, Default = 50",
                        "schema": {
                            "type": "integer"
                        },
                        "in": "query"
                    },
                    {
                        "name": "q",
                        "description": "Query what shall be searched",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "required": true
                    },
                    {
                        "name": "fulltext",
                        "description": "Should the query search Names beginning with (fulltext missing or false)\nor Names containing the seatch string",
                        "schema": {
                            "type": "boolean"
                        },
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {

                                    }
                                }
                            }
                        },
                        "description": "Successful search"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "getAddressLookupSimple",
                "summary": "Simple query for addresses"
            },
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "examples": {
                                "default": {
                                    "value": {
                                        "query": "DQL statement here"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "mail"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {

                            }
                        },
                        "description": "Successful query"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "getAddressLookupQuery",
                "summary": "Complex lookup queries",
                "description": "Use a DQL query to find addresses"
            },
            "parameters": [
                {
                    "name": "directoryid",
                    "description": "Name of the directory that contains the entry. If omitted main addressbook is used",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                },
                {
                    "name": "mailboxid",
                    "description": "Optional, when omitted the default mailbox of the authenticated user is addressed. Only used in delegation access when owner and user are different.\nCould be: replicaid, filepath or owner shortname or email",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                },
                {
                    "name": "all",
                    "description": "When set to true, an extensive search across all addressbooks will be launched. Results get potentially cached",
                    "schema": {
                        "type": "boolean"
                    },
                    "in": "query"
                },
                {
                    "name": "skip",
                    "description": "How many of the result entries shall be skipped.\nUsed for pagination. Default is 0",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "query"
                },
                {
                    "name": "count",
                    "description": "How many entries shall be maximal returned?\nDefault is 1000",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "query"
                }
            ]
        },
        "/attachments/{unid}/{attachmentname}": {
            "summary": "Retrive an attachment",
            "description": "Retrive mail attachments, shim for a keep-core call",
            "get": {
                "tags": [
                    "mail"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/octet-stream": {

                            }
                        },
                        "description": "Successful retrieval"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/404notFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "getMailAttachment",
                "summary": "Retrieves one attachment",
                "description": "Can be mail, task or Calendar attached"
            },
            "delete": {
                "tags": [
                    "mail"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {

                            }
                        },
                        "description": "Successful retrieval"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/404notFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "deleteMailAttachment",
                "summary": "Deletes one attachment",
                "description": "Can be mail, task or Calendar attached.\nWorks for both incoming and outgoing documents"
            },
            "parameters": [
                {
                    "name": "mailboxid",
                    "description": "Optional, when omitted the default mailbox of the authenticated user is addressed. Only used in delegation access when owner and user are different.\nCould be: replicaid, filepath or owner shortname or email",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                },
                {
                    "name": "attachmentname",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                },
                {
                    "name": "unid",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/delegation": {
            "summary": "TODO: own / other delegation retrieve/request",
            "description": "By type:\n- Calendar\n- Mailbox\n- Contacts\n- delete / create / edit",
            "get": {
                "tags": [
                    "calendar"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {

                            }
                        },
                        "description": "List of people this mailbox has delegated access to"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "getDelegation",
                "summary": "Show delegation information"
            },
            "put": {
                "requestBody": {
                    "description": "List of delegates to add or remove",
                    "content": {
                        "application/json": {
                            "examples": {
                                "default": {
                                    "value": {
                                        "add": {
                                            "jane@doe.com": "Editor",
                                            "frank@en.stein.com": "CalendarReader"
                                        },
                                        "remove": [
                                            "john@doe.com"
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "calendar"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {

                            }
                        },
                        "description": "List of people this mailbox has delegated access to"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "updateDelegation",
                "summary": "update one delegation information"
            },
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {

                        }
                    },
                    "required": true
                },
                "tags": [
                    "calendar"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {

                            }
                        },
                        "description": "List of people this mailbox has delegated access to"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "createReplaceDelegation",
                "summary": "Update delegation information"
            },
            "delete": {
                "tags": [
                    "calendar"
                ],
                "parameters": [
                    {
                        "examples": {
                            "johndoe": {
                                "value": "\"john%40doe.com\""
                            }
                        },
                        "name": "delegate",
                        "description": "Id of the delegate to delete",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {

                            }
                        },
                        "description": "List of people this mailbox has delegated access to"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "deleteDelegation",
                "summary": "Remove one delegation information",
                "description": "Delete one by one if parameter is missing throws an error.\nPUT can also be used to remove delegates"
            },
            "parameters": [
                {
                    "name": "mailboxid",
                    "description": "Optional, when omitted the default mailbox of the authenticated user is addressed. Only used in delegation access when owner and user are different.\nCould be: replicaid, filepath or owner shortname or email",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                }
            ]
        },
        "/info": {
            "summary": "Information about a single mailbox",
            "get": {
                "tags": [
                    "meta"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MailboxInfo"
                                }
                            }
                        },
                        "description": "Successful retrieval of meta data"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "getMailboxInfo",
                "summary": "Gets mailbox info"
            },
            "parameters": [
                {
                    "name": "mailboxid",
                    "description": "Optional, when omitted the default mailbox of the authenticated user is addressed. Only used in delegation access when owner and user are different.\nCould be: replicaid, filepath or owner shortname or email",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                }
            ]
        },
        "/message": {
            "summary": "Interact with a message",
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Message"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "mail"
                ],
                "parameters": [
                    {
                        "name": "send",
                        "description": "Should the new message be sent out",
                        "schema": {
                            "type": "boolean"
                        },
                        "in": "query"
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {

                            }
                        },
                        "description": "Successfull creation"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "createMessage",
                "summary": "Creates a message"
            },
            "parameters": [
                {
                    "name": "mailboxid",
                    "description": "Optional, when omitted the default mailbox of the authenticated user is addressed. Only used in delegation access when owner and user are different.\nCould be: replicaid, filepath or owner shortname or email",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                }
            ]
        },
        "/message/body/{unid}": {
            "summary": "HTML or Text body",
            "get": {
                "tags": [
                    "mail"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "text/html": {

                            },
                            "text/plain": {

                            }
                        },
                        "description": "HTML or Text body"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "getMessageBody",
                "summary": "Retrieves a message body"
            },
            "parameters": [
                {
                    "name": "mailboxid",
                    "description": "Optional, when omitted the default mailbox of the authenticated user is addressed. Only used in delegation access when owner and user are different.\nCould be: replicaid, filepath or owner shortname or email",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                },
                {
                    "name": "unid",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/message/headers/{unid}": {
            "summary": "Retrieve message headers",
            "get": {
                "tags": [
                    "mail"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MessageHeaders"
                                }
                            }
                        },
                        "description": "Message Headers"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "getMessageHeaders",
                "summary": "Retrieves a message header"
            },
            "parameters": [
                {
                    "name": "mailboxid",
                    "description": "Optional, when omitted the default mailbox of the authenticated user is addressed. Only used in delegation access when owner and user are different.\nCould be: replicaid, filepath or owner shortname or email",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                },
                {
                    "name": "unid",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/notifications": {
            "summary": "Websocket endpoint for notifications",
            "parameters": [
                {
                    "name": "mailboxid",
                    "description": "Optional, when omitted the default mailbox of the authenticated user is addressed. Only used in delegation access when owner and user are different.\nCould be: replicaid, filepath or owner shortname or email",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                }
            ]
        },
        "/preferences": {
            "summary": "PIM Settings",
            "get": {
                "tags": [
                    "settings"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {

                            }
                        },
                        "description": "Returns Mailbox settings"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "getSettings",
                "summary": "List of settings/preferences",
                "description": "Return list of settings/preferences objects"
            },
            "post": {
                "tags": [
                    "settings"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {

                            }
                        },
                        "description": "Mailbox settings"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "postSettings"
            },
            "parameters": [
                {
                    "name": "mailboxid",
                    "description": "Optional, when omitted the default mailbox of the authenticated user is addressed. Only used in delegation access when owner and user are different.\nCould be: replicaid, filepath or owner shortname or email",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                }
            ]
        },
        "/rules": {
            "get": {
                "tags": [
                    "mail"
                ],
                "parameters": [
                    {
                        "name": "documents",
                        "description": "Should the command return document fields without the Body field rather than the view columns",
                        "schema": {
                            "type": "boolean"
                        },
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {

                                    }
                                }
                            }
                        },
                        "description": "List of mail rules"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "getRules",
                "summary": "List of Mail rules"
            },
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RulesInfo"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "mail"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {

                            }
                        },
                        "description": "List of mail rules"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "createRules",
                "summary": "Creates multiple mail rules"
            },
            "delete": {
                "tags": [
                    "mail"
                ],
                "parameters": [
                    {
                        "name": "ruleid",
                        "description": "Identity of the rule to delete",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {

                            }
                        },
                        "description": "List of mail rules"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "deleteRules",
                "summary": "Removes all mail rules"
            },
            "patch": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RulesInfo"
                            },
                            "examples": {
                                "disable": {
                                    "value": {
                                        "Rules": [
                                            {
                                                "unid": "65C76ABC277D372D8525858A0050BDF6",
                                                "Enable": "0"
                                            },
                                            {
                                                "unid": "C90CCA86751C12038525858A0050BDF7",
                                                "Enable": "0"
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "mail"
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "updateRules",
                "summary": "Patches multiple mail rules"
            },
            "parameters": [
                {
                    "name": "mailboxid",
                    "description": "Optional, when omitted the default mailbox of the authenticated user is addressed. Only used in delegation access when owner and user are different.\nCould be: replicaid, filepath or owner shortname or email",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                },
                {
                    "name": "documents",
                    "description": "Should the command return document fields without the Body field rather than the view columns",
                    "schema": {
                        "type": "boolean"
                    },
                    "in": "query"
                }
            ]
        },
        "/task/{unid}": {
            "get": {
                "tags": [
                    "tasks"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskResponse"
                                }
                            }
                        },
                        "description": "Task retrived"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "getTask",
                "summary": "Retrieves one task"
            },
            "post": {
                "tags": [
                    "tasks"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {

                            }
                        },
                        "description": "Task retrived"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "postTask",
                "summary": "Updates one task"
            },
            "delete": {
                "tags": [
                    "tasks"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {

                            }
                        },
                        "description": "Task retrived"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "deleteTask",
                "summary": "Deletes one task"
            },
            "patch": {
                "tags": [
                    "tasks"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {

                            }
                        },
                        "description": "Task retrived"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "patchTask",
                "summary": "Updates task status"
            },
            "parameters": [
                {
                    "name": "mailboxid",
                    "description": "Optional, when omitted the default mailbox of the authenticated user is addressed. Only used in delegation access when owner and user are different.\nCould be: replicaid, filepath or owner shortname or email",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                },
                {
                    "name": "unid",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/thread/{threadid}": {
            "get": {
                "tags": [
                    "mail"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {

                            }
                        },
                        "description": "Message list belonging to one conversation"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "getMailThread",
                "summary": "Retrieves list of messages in a conversation"
            },
            "parameters": [
                {
                    "name": "mailboxid",
                    "description": "Optional, when omitted the default mailbox of the authenticated user is addressed. Only used in delegation access when owner and user are different.\nCould be: replicaid, filepath or owner shortname or email",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                },
                {
                    "name": "threadid",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/person/{personid}": {
            "summary": "Personal addressbook Person entry",
            "get": {
                "tags": [
                    "contacts"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {

                            }
                        },
                        "description": "one person entry"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "getPerson",
                "summary": "Retrieves a person addressbook entry",
                "description": "Addressbook entry in JSON"
            },
            "put": {
                "tags": [
                    "contacts"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {

                            }
                        },
                        "description": "one person entry"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "putPerson",
                "summary": "Updates a person addressbook entry",
                "description": "update Addressbook entry in JSON"
            },
            "delete": {
                "tags": [
                    "contacts"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {

                            }
                        },
                        "description": "one person entry"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "deletePerson",
                "summary": "Removes a personal addressbook entry",
                "description": "remove a personal addressbook entry"
            },
            "parameters": [
                {
                    "name": "mailboxid",
                    "description": "Optional, when omitted the default mailbox of the authenticated user is addressed. Only used in delegation access when owner and user are different.\nCould be: replicaid, filepath or owner shortname or email",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                },
                {
                    "name": "personid",
                    "description": "Unique ID of the person in Contacts",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/calendar/{calid}": {
            "summary": "Interact with one calendar",
            "description": "Including Birthdays derived from personal contacts",
            "get": {
                "tags": [
                    "calendar"
                ],
                "parameters": [
                    {
                        "name": "enddate",
                        "description": "Last day (inclusive) for retriveal",
                        "schema": {
                            "format": "date",
                            "type": "string"
                        },
                        "in": "query"
                    },
                    {
                        "name": "startdate",
                        "description": "entries starting what date",
                        "schema": {
                            "format": "date",
                            "type": "string"
                        },
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {

                                    }
                                }
                            }
                        },
                        "description": "Successful retrieval of calendar entries"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "getOneCalendar",
                "summary": "Fetches one calendar",
                "description": "Gets the list of calendar entries from one calendar"
            },
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {

                        }
                    },
                    "required": true
                },
                "tags": [
                    "calendar"
                ],
                "parameters": [
                    {
                        "name": "send",
                        "description": "Should the calendar entry be sent out to the invitees or stay as draft",
                        "schema": {
                            "type": "boolean"
                        },
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {

                            }
                        },
                        "description": "Successful calendar entry creation"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "createCalendarEntry",
                "summary": "Creates a calendar entry in a given calendar",
                "description": "Creates a new calendar entry. It doesn't support iCal data."
            },
            "delete": {
                "tags": [
                    "calendar"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {

                            }
                        },
                        "description": "Successful retrieval of calendar entries"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "deleteOneCalendar",
                "summary": "Deletes whole calendar",
                "description": "Deletes whole calendar. Works only for additional (shared) calendars"
            },
            "parameters": [
                {
                    "name": "mailboxid",
                    "description": "Optional, when omitted the default mailbox of the authenticated user is addressed. Only used in delegation access when owner and user are different.\nCould be: replicaid, filepath or owner shortname or email",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                },
                {
                    "name": "calid",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                },
                {
                    "name": "count",
                    "description": "How many entries shall be maximal returned? Default is 1000",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "query"
                },
                {
                    "name": "skip",
                    "description": "How many of the result entries shall be skipped.\nUsed for pagination. Default is 0",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "query"
                }
            ]
        },
        "/calendar": {
            "summary": "Interact with private and shared calendars",
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "examples": {
                                "default": {
                                    "value": {
                                        "calendarname": "name",
                                        "sharedwith": [
                                            "john@doe.com",
                                            "jane@doe.com"
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "calendar"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {

                                    }
                                }
                            }
                        },
                        "description": "List of calendars"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "createCalendars",
                "summary": "Creates a new calendar",
                "description": "Can be shared or private"
            },
            "parameters": [
                {
                    "name": "mailboxid",
                    "description": "Optional, when omitted the default mailbox of the authenticated user is addressed. Only used in delegation access when owner and user are different.\nCould be: replicaid, filepath or owner shortname or email",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                }
            ]
        },
        "/groups": {
            "summary": "List of personal mailing lists",
            "get": {
                "tags": [
                    "mail"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {

                                    }
                                },
                                "examples": {
                                    "default": {
                                        "value": {
                                            "Cold Cases": 42,
                                            "Department 8": 2,
                                            "Team A": 35
                                        }
                                    }
                                }
                            }
                        },
                        "description": "List of mailinglists"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "getPersonalMailingLists",
                "summary": "Retrieves existing personal mailing lists"
            },
            "parameters": [
                {
                    "name": "mailboxid",
                    "description": "Optional, when omitted the default mailbox of the authenticated user is addressed. Only used in delegation access when owner and user are different.\nCould be: replicaid, filepath or owner shortname or email",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                },
                {
                    "name": "skip",
                    "description": "HOw many of the result entries shall be skipped.\nUsed for pagination. Default is 0",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "query"
                },
                {
                    "name": "count",
                    "description": "How many entries shall be maximal returned?\nDefault is 50",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "query"
                }
            ]
        },
        "/junk": {
            "summary": "Junk folder, where all the ads end up",
            "get": {
                "tags": [
                    "mail"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/MessageListItem"
                                    }
                                }
                            }
                        },
                        "description": "List of crap eMail"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "getJunkEmail",
                "summary": "Retrieves Junk messages",
                "description": "shortcut to /label/($JUNK) retrieve only"
            },
            "parameters": [
                {
                    "name": "mailboxid",
                    "description": "Optional, when omitted the default mailbox of the authenticated user is addressed. Only used in delegation access when owner and user are different.\nCould be: replicaid, filepath or owner shortname or email",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                },
                {
                    "name": "skip",
                    "description": "How many of the result entries shall be skipped.\nUsed for pagination. Default is 0",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "query"
                },
                {
                    "name": "count",
                    "description": "How many entries shall be maximal returned?\nDefault is 1000",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "query"
                },
                {
                    "name": "documents",
                    "description": "Shall documents instead of view entries be retrieved",
                    "schema": {
                        "type": "boolean"
                    },
                    "in": "query"
                }
            ]
        },
        "/label": {
            "summary": "Label / Folder / View info",
            "description": "Interact with folder information",
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LabelActionInfo"
                            },
                            "examples": {
                                "default": {
                                    "value": {
                                        "DisplayName": "Test folder"
                                    }
                                },
                                "contactsLabel": {
                                    "value": {
                                        "DisplayName": "Contacts Folder",
                                        "DesignType": "contacts"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "mail"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LabelInfo"
                                }
                            }
                        },
                        "description": "List of mailbox info"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "createLabel",
                "summary": "Creates a new Label/Folder",
                "description": "Create a new Label/Folder"
            },
            "parameters": [
                {
                    "name": "mailboxid",
                    "description": "Optional, when omitted the default mailbox of the authenticated user is addressed. Only used in delegation access when owner and user are different.\nCould be: replicaid, filepath or owner shortname or email",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                }
            ]
        },
        "/ooo": {
            "summary": "Out of office Info",
            "get": {
                "tags": [
                    "calendar"
                ],
                "parameters": [
                    {
                        "name": "userid",
                        "description": "The OOO information for a single user",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "required": false
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {

                            }
                        },
                        "description": "Current OOO status"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "getOOO",
                "summary": "Retrieves OOO info",
                "description": "Instant OOO information"
            },
            "put": {
                "tags": [
                    "calendar"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {

                            }
                        },
                        "description": "Current OOO status"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "updateOOO",
                "summary": "Updates personal OOO info",
                "description": "Updates OOO information, might get broadcast using cloudEvents"
            },
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OOORequest"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "calendar"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {

                            }
                        },
                        "description": "List of OOO infos"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "queryOOO",
                "summary": "get multiple OOO status"
            },
            "parameters": [
                {
                    "name": "mailboxid",
                    "description": "Optional, when omitted the default mailbox of the authenticated user is addressed. Only used in delegation access when owner and user are different.\nCould be: replicaid, filepath or owner shortname or email",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                }
            ]
        },
        "/people": {
            "summary": "Personal addressbook people",
            "get": {
                "tags": [
                    "contacts"
                ],
                "parameters": [
                    {
                        "name": "count",
                        "description": "How many entries shall be maximal returned?\nDefault is 1000",
                        "schema": {
                            "type": "integer"
                        },
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {

                                    }
                                }
                            }
                        },
                        "description": "Person list"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "getPeople",
                "summary": "Retrieves list of addressbook entries"
            },
            "parameters": [
                {
                    "name": "mailboxid",
                    "description": "Optional, when omitted the default mailbox of the authenticated user is addressed. Only used in delegation access when owner and user are different.\nCould be: replicaid, filepath or owner shortname or email",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                },
                {
                    "name": "skip",
                    "description": "HOw many of the result entries shall be skipped.\nUsed for pagination. Default is 0",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "query"
                },
                {
                    "name": "count",
                    "description": "How many entries shall be maximal returned?\nDefault is 1000",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "query"
                }
            ]
        },
        "/person": {
            "summary": "Personal addressbook people",
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {

                        }
                    },
                    "required": true
                },
                "tags": [
                    "contacts"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {

                            }
                        },
                        "description": "Person list"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "createPerson",
                "summary": "Creates a new person entry"
            },
            "parameters": [
                {
                    "name": "mailboxid",
                    "description": "Optional, when omitted the default mailbox of the authenticated user is addressed. Only used in delegation access when owner and user are different.\nCould be: replicaid, filepath or owner shortname or email",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                }
            ]
        },
        "/rule": {
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RuleInfo"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "mail"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {

                            }
                        },
                        "description": "List of mail rules"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "createRule",
                "summary": "Creates one mail rule"
            },
            "parameters": [
                {
                    "name": "mailboxid",
                    "description": "Optional, when omitted the default mailbox of the authenticated user is addressed. Only used in delegation access when owner and user are different.\nCould be: replicaid, filepath or owner shortname or email",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                }
            ]
        },
        "/rule/{ruleid}": {
            "get": {
                "tags": [
                    "mail"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {

                            }
                        },
                        "description": "List of mail rules"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "getRule",
                "summary": "Retrieves one mail rule"
            },
            "delete": {
                "tags": [
                    "mail"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {

                            }
                        },
                        "description": "List of mail rules"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "deleteRule",
                "summary": "Removes one mail rule"
            },
            "patch": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RuleInfo"
                            },
                            "examples": {
                                "remove_exception_and_disable": {
                                    "value": {
                                        "Enable": "0"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "mail"
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "updateRule",
                "summary": "Patches one mail rule"
            },
            "parameters": [
                {
                    "name": "mailboxid",
                    "description": "Optional, when omitted the default mailbox of the authenticated user is addressed. Only used in delegation access when owner and user are different.\nCould be: replicaid, filepath or owner shortname or email",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                },
                {
                    "name": "ruleid",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/search": {
            "summary": "Look for specific messages",
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "examples": {
                                "default": {
                                    "value": "{\n    \"query\" : \"Horse race\",\n    \"type\" : \"FT\"\n    \"count\" : 20,\n    \"skip\" : 0\n}"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "mail"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/MessageListItem"
                                    }
                                }
                            }
                        },
                        "description": "Search result"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "searchPIM",
                "description": "Search using DQL or FTSearch"
            },
            "parameters": [
                {
                    "name": "mailboxid",
                    "description": "Optional, when omitted the default mailbox of the authenticated user is addressed. Only used in delegation access when owner and user are different.\nCould be: replicaid, filepath or owner shortname or email",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                },
                {
                    "name": "skip",
                    "description": "HOw many of the result entries shall be skipped.\nUsed for pagination. Default is 0",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "query"
                },
                {
                    "name": "count",
                    "description": "How many entries shall be maximal returned?\nDefault is 1000",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "query"
                }
            ]
        },
        "/sent": {
            "get": {
                "tags": [
                    "mail"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/MessageListItem"
                                    }
                                }
                            }
                        },
                        "description": "List of sent messages for this mailbox"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "getSentList",
                "summary": "Retrieves sent messages"
            },
            "parameters": [
                {
                    "name": "mailboxid",
                    "description": "Optional, when omitted the default mailbox of the authenticated user is addressed. Only used in delegation access when owner and user are different.\nCould be: replicaid, filepath or owner shortname or email",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                },
                {
                    "name": "skip",
                    "description": "How many of the result entries shall be skipped.\nUsed for pagination. Default is 0",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "query"
                },
                {
                    "name": "count",
                    "description": "How many entries shall be maximal returned?\nDefault is 1000",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "query"
                },
                {
                    "name": "documents",
                    "description": "Should the command return document fields without the Body field rather than the view columns",
                    "schema": {
                        "type": "boolean"
                    },
                    "in": "query",
                    "required": false
                }
            ]
        },
        "/tasks": {
            "get": {
                "tags": [
                    "tasks"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {

                                    }
                                }
                            }
                        },
                        "description": "List of tasks"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "getTaskList",
                "summary": "Retrieves task list",
                "description": "retrieve Tasks"
            },
            "parameters": [
                {
                    "name": "mailboxid",
                    "description": "Optional, when omitted the default mailbox of the authenticated user is addressed. Only used in delegation access when owner and user are different.\nCould be: replicaid, filepath or owner shortname or email",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                },
                {
                    "name": "skip",
                    "description": "HOw many of the result entries shall be skipped.\nUsed for pagination. Default is 0",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "query"
                },
                {
                    "name": "count",
                    "description": "How many entries shall be maximal returned?\nDefault is 1000",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "query"
                }
            ]
        },
        "/task": {
            "post": {
                "tags": [
                    "tasks"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {

                            }
                        },
                        "description": "List of tasks"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "createTask",
                "summary": "Creates a new task",
                "description": "create a new Task"
            },
            "parameters": [
                {
                    "name": "mailboxid",
                    "description": "Optional, when omitted the default mailbox of the authenticated user is addressed. Only used in delegation access when owner and user are different.\nCould be: replicaid, filepath or owner shortname or email",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                },
                {
                    "name": "skip",
                    "description": "HOw many of the result entries shall be skipped.\nUsed for pagination. Default is 0",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "query"
                },
                {
                    "name": "count",
                    "description": "How many entries shall be maximal returned?\nDefault is 1000",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "query"
                }
            ]
        },
        "/template": {
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {

                        }
                    },
                    "required": true
                },
                "tags": [
                    "settings"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {

                            }
                        },
                        "description": "Retrieve list of available templates"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "createTemplate",
                "summary": "Creates a template"
            },
            "parameters": [
                {
                    "name": "mailboxid",
                    "description": "Optional, when omitted the default mailbox of the authenticated user is addressed. Only used in delegation access when owner and user are different.\nCould be: replicaid, filepath or owner shortname or email",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                }
            ]
        },
        "/template/{templateid}": {
            "get": {
                "tags": [
                    "settings"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {

                            }
                        },
                        "description": "Retrieve list of available templates"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "getTemplate",
                "summary": "Retrieves one template"
            },
            "put": {
                "requestBody": {
                    "description": "Complete template ",
                    "content": {
                        "application/json": {

                        }
                    },
                    "required": true
                },
                "tags": [
                    "settings"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {

                            }
                        },
                        "description": "Retrieve list of available templates"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "updateTemplate",
                "summary": "Updates one template"
            },
            "delete": {
                "tags": [
                    "settings"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {

                            }
                        },
                        "description": "Retrieve list of available templates"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "deleteTemplate",
                "summary": "Remove one template"
            },
            "parameters": [
                {
                    "name": "mailboxid",
                    "description": "Optional, when omitted the default mailbox of the authenticated user is addressed. Only used in delegation access when owner and user are different.\nCould be: replicaid, filepath or owner shortname or email",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                },
                {
                    "name": "templateid",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/templates": {
            "get": {
                "tags": [
                    "settings"
                ],
                "parameters": [
                    {
                        "name": "templateType",
                        "description": "What templates to return\n- all\n- signature\n- content\n- documents",
                        "schema": {
                            "enum": [
                                "all",
                                "signature",
                                "content",
                                "documents"
                            ],
                            "type": "string"
                        },
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {

                                    }
                                }
                            }
                        },
                        "description": "Retrieve list of available templates"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "getTemplates",
                "summary": "List of all templates"
            },
            "parameters": [
                {
                    "name": "mailboxid",
                    "description": "Optional, when omitted the default mailbox of the authenticated user is addressed. Only used in delegation access when owner and user are different.\nCould be: replicaid, filepath or owner shortname or email",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                },
                {
                    "name": "skip",
                    "description": "HOw many of the result entries shall be skipped.\nUsed for pagination. Default is 0",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "query"
                },
                {
                    "name": "count",
                    "description": "How many entries shall be maximal returned?\nDefault is 1000",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "query"
                }
            ]
        },
        "/calendar/{calid}/{calentryid}": {
            "summary": "Interact with a single calendar entry",
            "description": "Interact with a single calendar entry",
            "get": {
                "tags": [
                    "calendar"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {

                            }
                        },
                        "description": "Successful retrieval"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "getCalendarEntry",
                "summary": "Retrieves a single Calendar Entry"
            },
            "put": {
                "requestBody": {
                    "content": {
                        "application/json": {

                        }
                    },
                    "required": true
                },
                "tags": [
                    "calendar"
                ],
                "parameters": [
                    {
                        "name": "send",
                        "description": "Should the calendar entry be sent out to the invitees or stay as draft",
                        "schema": {
                            "type": "boolean"
                        },
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {

                            }
                        },
                        "description": "Successful update of calendar entry"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "updateCalendarEntry",
                "summary": "Updates a calendar entry",
                "description": "Updates a calendar entry"
            },
            "delete": {
                "tags": [
                    "calendar"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {

                            }
                        },
                        "description": "Successful deletion"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "deleteCalendarEntry",
                "summary": "Removes a calendar entry and its replies"
            },
            "patch": {
                "requestBody": {
                    "content": {
                        "application/json": {

                        }
                    },
                    "required": true
                },
                "tags": [
                    "calendar"
                ],
                "responses": {
                    "200": {
                        "description": "successful patch, returns full entry (minus attachments)"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "modifyCalendarEntry",
                "summary": "Updates parts of a calendar entry",
                "description": "e.g. acceptance or reject\nor change of chair\nadding / removing of invitees"
            },
            "parameters": [
                {
                    "name": "mailboxid",
                    "description": "Optional, when omitted the default mailbox of the authenticated user is addressed. Only used in delegation access when owner and user are different.\nCould be: replicaid, filepath or owner shortname or email",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                },
                {
                    "name": "calid",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                },
                {
                    "name": "calentryid",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                },
                {
                    "name": "ical",
                    "description": "When set to true, the data format rendered will be ical",
                    "schema": {
                        "type": "boolean"
                    },
                    "in": "query"
                }
            ]
        },
        "/public": {
            "summary": "Information about shared resources",
            "description": "Shared information can include\n- Addressbooks\n- Notebooks\n- Calendars",
            "get": {
                "tags": [
                    "mail"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {

                            }
                        },
                        "description": "List of shared resources"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "getPublicResources",
                "summary": "List of shared resources",
                "description": "Resources can be\n- Calendars\n- Addressbooks\n- n.n"
            },
            "parameters": [
                {
                    "name": "mailboxid",
                    "description": "Optional, when omitted the default mailbox of the authenticated user is addressed. Only used in delegation access when owner and user are different.\nCould be: replicaid, filepath or owner shortname or email",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                }
            ]
        },
        "/public/groups": {
            "summary": "List of all groups in a shared directory",
            "description": "List of all public groups in a shared directory",
            "get": {
                "tags": [
                    "contacts"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {

                                    }
                                }
                            }
                        },
                        "description": "Return list of groups"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "getPublicGroups",
                "summary": "Retrieves list of groups",
                "description": "Retrieves list of public groups"
            },
            "parameters": [
                {
                    "name": "directoryid",
                    "description": "Name of the directory that contains the group. If omitted main addressbook is used",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                }
            ]
        },
        "/public/group/{groupid}": {
            "summary": "A specific group in a shared directory",
            "description": "a specific group in a shared directory",
            "get": {
                "tags": [
                    "contacts"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {

                            }
                        },
                        "description": "Retrieves a group information"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "getPublicGroup",
                "summary": "Retrieves a group from a shared addressbook",
                "description": "Retrieves a group from a shared addressbook"
            },
            "post": {
                "tags": [
                    "contacts"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {

                            }
                        },
                        "description": "Retrieves the updated group information"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "updatePublicGroup",
                "summary": "Updates member in group from a shared addressbook",
                "description": "Updates member in group from a shared addressbook"
            },
            "delete": {
                "tags": [
                    "contacts"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {

                            }
                        },
                        "description": "Returns status,statusCode, message and unid"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "deleteSharedGroup",
                "summary": "Removes a group from a shared addressbook",
                "description": "Removes a group from a shared addressbook"
            },
            "parameters": [
                {
                    "name": "directoryid",
                    "description": "Name of the directory that contains the entry. If omitted main addressbook is used",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                },
                {
                    "name": "groupid",
                    "description": "unid of a group",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/public/people": {
            "summary": "List of people in a shared directory",
            "get": {
                "tags": [
                    "contacts"
                ],
                "parameters": [
                    {
                        "name": "skip",
                        "description": "How many of the result entries shall be skipped. Used for pagination. Default is 0",
                        "schema": {
                            "type": "integer"
                        },
                        "in": "query"
                    },
                    {
                        "name": "count",
                        "description": "How many entries shall be maximal returned? Default is 1000",
                        "schema": {
                            "type": "integer"
                        },
                        "in": "query"
                    },
                    {
                        "name": "startswith",
                        "description": "Beginning of a name",
                        "schema": {
                            "type": "string"
                        },
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {

                                    }
                                }
                            }
                        },
                        "description": "List of people"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "getPublicPeople",
                "summary": "Retrieves people from a master directory",
                "description": "Retrieves list of people in a shared directory"
            },
            "parameters": [
                {
                    "name": "directoryid",
                    "description": "Name of the directory that contains the entry. If omitted main addressbook is used",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                }
            ]
        },
        "/public/person/{personid}": {
            "summary": "One specific person in a shared directory",
            "get": {
                "tags": [
                    "contacts"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {

                            }
                        },
                        "description": "Person details from addressbook"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "getPublicPerson",
                "summary": "Retrieve a person from a master directory",
                "description": "Retrieve a person document information from a shared directory"
            },
            "post": {
                "tags": [
                    "contacts"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {

                            }
                        },
                        "description": "Person details from addressbook"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "updatePublicPerson",
                "summary": "Updates a person from a master directory",
                "description": "Updates a person document information from a shared directory"
            },
            "delete": {
                "tags": [
                    "contacts"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {

                            }
                        },
                        "description": "List of people"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "deletePublicPerson",
                "summary": "Removes a person from a master directory",
                "description": "Deletes a person document from a shared directory"
            },
            "parameters": [
                {
                    "name": "directoryid",
                    "description": "Name of the directory that contains the entry. If omitted main addressbook is used",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                },
                {
                    "name": "personid",
                    "description": "Unique ID of the person document",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/public/person": {
            "summary": "List of people in a shared directory",
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {

                        }
                    },
                    "required": true
                },
                "tags": [
                    "contacts"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {

                            }
                        },
                        "description": "List of people"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "createPublicPerson",
                "summary": "Adds a person to a master directory",
                "description": "Creates a person document on a shared directory"
            },
            "parameters": [
                {
                    "name": "directoryid",
                    "description": "Name of the directory that contains the entry. If omitted main addressbook is used",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                }
            ]
        },
        "/label/{labelid}": {
            "summary": "Information about a folder/label, NOT list of entries",
            "description": "Labels a.k.a folders\nA message can have 0:n labels (Verse/gMail lingo)\nor be in 0:n folders (Notes)\n\nIn outlook there's only one folder, they search",
            "get": {
                "tags": [
                    "mail"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {

                            }
                        },
                        "description": "Folder info with \"parent\", childcount, messagecount, unid"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "404": {
                        "$ref": "#/components/responses/404notFound"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "getLabelInfo",
                "summary": "Gets info about a label/folder",
                "description": "Includes UNID, potential parent etc"
            },
            "put": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "examples": {
                                "RenameFolder": {
                                    "value": {
                                        "labelRenameTo": "NewFolderName"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "mail"
                ],
                "responses": {
                    "200": {
                        "description": "Label Update Succeeded."
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "404": {
                        "$ref": "#/components/responses/404notFound"
                    }
                },
                "operationId": "updateLabel",
                "summary": "Updates a Label / Folder",
                "description": "Updates the Label / Folder name"
            },
            "delete": {
                "tags": [
                    "mail"
                ],
                "parameters": [
                    {
                        "name": "documentdeletion",
                        "description": "Decide what to do with documents in the folder.\nOptions:\n- NONE : no documents get deleted\n- LASTFOLDER : delete documents that are in no other folder\n- ALL : Delete all documents in that folder (USE at your own risk)",
                        "schema": {
                            "enum": [
                                "NONE",
                                "LASTFOLDER",
                                "ALL"
                            ],
                            "type": "string"
                        },
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {

                            }
                        },
                        "description": "Successful deleted"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "deleteLabel",
                "summary": "Deletes a label",
                "description": "Removes a folder/label from the mail databases.\nDoes not delete documents unless explicitly asked"
            },
            "patch": {
                "requestBody": {
                    "description": "List of labelids to be moved",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LabelActionInfo"
                            },
                            "examples": {
                                "moveLabelAction": {
                                    "value": {
                                        "move": [
                                            "B7F20780A4F15C32482585C8003FAAB2"
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "mail"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "examples": {
                                    "responseMoveLabel": {
                                        "value": {
                                            "Move Status": "Successful move of 1 folders to label B3E63E5F418514CF48258581003828B0",
                                            "movedFolderIds": [
                                                {
                                                    "status": "OK",
                                                    "statusCode": 200,
                                                    "message": "move folder successful",
                                                    "unid": "B7F20780A4F15C32482585C8003FAAB2"
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Successful move"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "404": {
                        "$ref": "#/components/responses/404notFound"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "moveLabel",
                "summary": "Move labels / folders / views",
                "description": "Move the labels / folders / views. Moving to folders needs to have unid as labelId and for root level will need to use %28%24Root%29($Root)"
            },
            "parameters": [
                {
                    "name": "labelid",
                    "description": "Unique ID of a label/folder",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                },
                {
                    "name": "mailboxid",
                    "description": "Alternat mailbox if not the default for the user",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                },
                {
                    "name": "includeSystemLabels",
                    "description": "Shall hidden and system Labels be included. Default = no",
                    "schema": {
                        "type": "boolean"
                    },
                    "in": "query"
                },
                {
                    "name": "includeUnreadCount",
                    "description": "Shall the number of unread documents be reported back",
                    "schema": {
                        "type": "boolean"
                    },
                    "in": "query"
                }
            ]
        },
        "/message/mime": {
            "description": "Used for clients that provide a FULL Mime message.\nNo translation is required",
            "post": {
                "requestBody": {
                    "content": {
                        "text/base64": {

                        }
                    },
                    "required": true
                },
                "tags": [
                    "mail"
                ],
                "parameters": [
                    {
                        "name": "send",
                        "description": "Should the new message be sent out",
                        "schema": {
                            "type": "boolean"
                        },
                        "in": "query"
                    }
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SuccessMessage"
                                }
                            }
                        },
                        "description": "Successful creation and process"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "createMimeMessage",
                "summary": "Creates a eMail document from a complete MIME payload",
                "description": "Accepts a BASE64 encoded MIME stream to be saved into a new Note.\nOptional: sends it out."
            },
            "parameters": [
                {
                    "name": "mailboxid",
                    "description": "Optional, when omitted the default mailbox of the authenticated user is addressed. Only used in delegation access when owner and user are different.\nCould be: replicaid, filepath or owner shortname or email",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                }
            ]
        },
        "/message/mime/{unid}": {
            "summary": "Interact with the RAW mime content of a message",
            "description": "Can be really big",
            "get": {
                "tags": [
                    "mail"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "text/plain": {

                            },
                            "text/base64": {

                            }
                        },
                        "description": "Full MIME"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "getMimeMessage",
                "summary": "Retrieves raw mime content"
            },
            "put": {
                "requestBody": {
                    "description": "Request Body in Base64 encoded MIME. Must include complete mime message inclding all headers",
                    "content": {
                        "text/base64": {

                        }
                    },
                    "required": true
                },
                "tags": [
                    "mail"
                ],
                "parameters": [
                    {
                        "name": "send",
                        "description": "Should the new message be sent out",
                        "schema": {
                            "type": "boolean"
                        },
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SuccessMessage"
                                }
                            }
                        },
                        "description": "Successful update of MIME message"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/404notFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "updateMimeMessage",
                "summary": "Updates raw mime content",
                "description": "Applies to draft messages"
            },
            "delete": {
                "tags": [
                    "mail"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SuccessMessage"
                                }
                            }
                        },
                        "description": "Successful deletions"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/404notFound"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "deleteMimeMessage",
                "summary": "Soft deletes one message",
                "description": "Removes the message from all labels and puts it into trash / softdeletions"
            },
            "parameters": [
                {
                    "name": "mailboxid",
                    "description": "Optional, when omitted the default mailbox of the authenticated user is addressed. Only used in delegation access when owner and user are different.\nCould be: replicaid, filepath or owner shortname or email",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                },
                {
                    "name": "unid",
                    "description": "UniqueId identifying the message",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/messages": {
            "summary": "Bulk operation for messages",
            "get": {
                "tags": [
                    "mail"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/MessageListItem"
                                    }
                                }
                            }
                        },
                        "description": "Messages"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "getMessageList",
                "summary": "Retrieves all messages",
                "description": "List of messages as if it is \"($ALL)\" view"
            },
            "patch": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateMessageProperty"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "mail"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SuccessMessage"
                                }
                            }
                        },
                        "description": "Message list"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "updateMessageProperties",
                "summary": "Sets document flags",
                "description": "Read, Unread, Attention Flag, deletions"
            },
            "parameters": [
                {
                    "name": "mailboxid",
                    "description": "Optional, when omitted the default mailbox of the authenticated user is addressed. Only used in delegation access when owner and user are different.\nCould be: replicaid, filepath or owner shortname or email",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                },
                {
                    "name": "skip",
                    "description": "How many of the result entries shall be skipped.\nUsed for pagination. Default is 0",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "query"
                },
                {
                    "name": "count",
                    "description": "How many entries shall be maximal returned?\nDefault is 1000",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "query"
                },
                {
                    "name": "documents",
                    "description": "Should the command return document fields without the Body field rather than the view columns",
                    "schema": {
                        "type": "boolean"
                    },
                    "in": "query"
                },
                {
                    "name": "unread",
                    "description": "Should the command return unread document details",
                    "schema": {
                        "type": "boolean"
                    },
                    "in": "query",
                    "required": false
                }
            ]
        },
        "/messages/{labelid}": {
            "summary": "Content of a folder/view",
            "description": "Labels a.k.a folders\nA message can have 0:n labels (Verse/gMail lingo)\nor be in 0:n folders (Notes)\n\nIn outlook there's only one folder, they search",
            "get": {
                "tags": [
                    "mail"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/MessageListItem"
                                    }
                                }
                            }
                        },
                        "description": "List of messages"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "getMessagesWithLabel",
                "summary": "Retrieves messages of a label"
            },
            "patch": {
                "requestBody": {
                    "description": "List of messages to add, remove or move",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LabelActionInfo"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "mail"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "description": "List of messages"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "addRemoveToLabel",
                "summary": "Adds, removes or moves set of messages to a label"
            },
            "parameters": [
                {
                    "name": "labelid",
                    "description": "Name of Label/Folder, for PATCH Id of Label/Folder",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                },
                {
                    "name": "mailboxid",
                    "description": "Optional, when omitted the default mailbox of the authenticated user is addressed. Only used in delegation access when owner and user are different.\nCould be: replicaid, filepath or owner shortname or email",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                },
                {
                    "name": "skip",
                    "description": "HOw many of the result entries shall be skipped.\nUsed for pagination. Default is 0",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "query"
                },
                {
                    "name": "count",
                    "description": "How many entries shall be maximal returned?\nDefault is 1000",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "query"
                },
                {
                    "name": "documents",
                    "description": "Should the command return document fields (minus the Body content) rather than the view columns",
                    "schema": {
                        "type": "boolean"
                    },
                    "in": "query"
                }
            ]
        },
        "/drafts": {
            "summary": "Draft messages",
            "description": "Shortcut to /labels/($DRAFT) for retrieval only",
            "get": {
                "tags": [
                    "mail"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/MessageListItem"
                                    }
                                }
                            }
                        },
                        "description": "List of draft message"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "getDrafts",
                "summary": "List of draft messages"
            },
            "parameters": [
                {
                    "name": "mailboxid",
                    "description": "Optional, when omitted the default mailbox of the authenticated user is addressed. Only used in delegation access when owner and user are different.\nCould be: replicaid, filepath or owner shortname or email",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                },
                {
                    "name": "skip",
                    "description": "HOw many of the result entries shall be skipped.\nUsed for pagination. Default is 0",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "query"
                },
                {
                    "name": "count",
                    "description": "How many entries shall be maximal returned?\nDefault is 1000",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "query"
                },
                {
                    "name": "documents",
                    "description": "Should the command return document fields (minus the Body content) rather than the view columns",
                    "schema": {
                        "type": "boolean"
                    },
                    "in": "query"
                }
            ]
        },
        "/inbox": {
            "summary": "Newly retrieved messages",
            "get": {
                "tags": [
                    "mail"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/MessageListItem"
                                    }
                                }
                            }
                        },
                        "description": "List of messages"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "getInbox",
                "summary": "Retrieves Inbox content"
            },
            "parameters": [
                {
                    "name": "mailboxid",
                    "description": "Optional, when omitted the default mailbox of the authenticated user is addressed. Only used in delegation access when owner and user are different.\nCould be: replicaid, filepath or owner shortname or email",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                },
                {
                    "name": "skip",
                    "description": "HOw many of the result entries shall be skipped.\nUsed for pagination. Default is 0",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "query"
                },
                {
                    "name": "count",
                    "description": "How many entries shall be maximal returned?\nDefault is 1000",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "query"
                },
                {
                    "name": "documents",
                    "description": "Should the command return document fields (minus the Body content) rather than the view columns",
                    "schema": {
                        "type": "boolean"
                    },
                    "in": "query"
                }
            ]
        },
        "/trash": {
            "get": {
                "tags": [
                    "mail"
                ],
                "parameters": [
                    {
                        "name": "skip",
                        "description": "HOw many of the result entries shall be skipped.\nUsed for pagination. Default is 0",
                        "schema": {
                            "type": "integer"
                        },
                        "in": "query"
                    },
                    {
                        "name": "count",
                        "description": "How many entries shall be maximal returned?\nDefault is 1000",
                        "schema": {
                            "type": "integer"
                        },
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/MessageListItem"
                                    }
                                }
                            }
                        },
                        "description": "Deleted messages"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "getTrash",
                "summary": "List of documents in trash"
            },
            "put": {
                "requestBody": {
                    "description": "List of documents to delete",
                    "content": {
                        "application/json": {
                            "examples": {
                                "unidArray": {
                                    "value": {
                                        "unid": [
                                            "9EB362C9C65E985A85258577005CB679",
                                            "69EE6461270D3B32646FBDAB692643B2"
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "mail"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/MessageListItem"
                                    }
                                }
                            }
                        },
                        "description": "Deleted messages"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "putTrash",
                "summary": "Move documents into trash"
            },
            "delete": {
                "tags": [
                    "mail"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "examples": {
                                    "default": {
                                        "value": {
                                            "status": "OK",
                                            "count": 33
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Deleted messages"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "emptyTrash",
                "summary": "Empty the trash"
            },
            "parameters": [
                {
                    "name": "mailboxid",
                    "description": "Optional, when omitted the default mailbox of the authenticated user is addressed. Only used in delegation access when owner and user are different.\nCould be: replicaid, filepath or owner shortname or email",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                },
                {
                    "name": "skip",
                    "description": "HOw many of the result entries shall be skipped.\nUsed for pagination. Default is 0",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "query"
                },
                {
                    "name": "count",
                    "description": "How many entries shall be maximal returned?\nDefault is 1000",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "query"
                },
                {
                    "name": "documents",
                    "description": "Should the command return document fields (minus the Body content) rather than the view columns",
                    "schema": {
                        "type": "boolean"
                    },
                    "in": "query"
                }
            ]
        },
        "/group": {
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PersonalMailingList"
                            },
                            "examples": {
                                "create": {
                                    "value": {
                                        "listName": "TestTeam",
                                        "Members": [
                                            "auser@test",
                                            "buser@test"
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "mail"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {

                            }
                        },
                        "description": "OK"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "createPersonalMailingList",
                "summary": "Creates a personal mailing list"
            }
        },
        "/group/{mailinglistid}": {
            "summary": "act on members of a personal Mailing list",
            "get": {
                "tags": [
                    "mail"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {

                            }
                        },
                        "description": "Retrieve mailing list"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "getPersonalMailingList",
                "summary": "Retrieves a personal mailing list members"
            },
            "delete": {
                "tags": [
                    "mail"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "examples": {
                                    "default": {
                                        "value": {
                                            "Cold Cases": 42,
                                            "Department 8": 2,
                                            "Team A": 35
                                        }
                                    }
                                }
                            }
                        },
                        "description": "List of mailinglists"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "deletePersonalMailingList",
                "summary": "Removes a personal mailing list"
            },
            "patch": {
                "requestBody": {
                    "description": "List of entries to add / remove from group",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PersonalMailingList"
                            },
                            "examples": {
                                "update": {
                                    "value": {
                                        "Members": [
                                            "auser@test",
                                            "cuser@test",
                                            "duser@test"
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "mail"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {

                            }
                        },
                        "description": "Retrieve mailing list"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "updatePersonalMailingList",
                "summary": "Updates content of personal mailing list"
            },
            "parameters": [
                {
                    "name": "mailboxid",
                    "description": "Optional, when omitted the default mailbox of the authenticated user is addressed. Only used in delegation access when owner and user are different.\nCould be: replicaid, filepath or owner shortname or email",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                },
                {
                    "name": "mailinglistid",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/personlookup": {
            "description": "Provide NotesNames or eMails,\nget the other part back",
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "examples": {
                                "mixed": {
                                    "value": {
                                        "NotesNames": [
                                            "Test User2/Labs",
                                            "Bad User/Nothing",
                                            "Test User1/Labs",
                                            "CN=Test User3/O=Labs"
                                        ],
                                        "Emails": [
                                            "tuser1@labs.com",
                                            "tuser2@labs.com",
                                            "fakeuser@nowhere.com",
                                            "tuser3@labs.com"
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "mail"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {

                                    }
                                },
                                "examples": {
                                    "mixed": {
                                        "value": [
                                            {
                                                "NotesNames": {
                                                    "Test User1/Labs": "tuser1@labs.com",
                                                    "Test User2/Labs": "tuser2@labs.com",
                                                    "CN=Test User3/O=Labs": "tuser3@labs.com"
                                                },
                                                "Emails": {
                                                    "tuser3@labs.com": "CN=Test User3/O=Labs",
                                                    "tuser1@labs.com": "CN=Test User1/O=Labs",
                                                    "tuser2@labs.com": "CN=Test User2/O=Labs"
                                                },
                                                "Missed": [
                                                    "Bad User/Nothing",
                                                    "fakeuser@nowhere.com"
                                                ]
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "description": "Successfull retrieval"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "lookupUserInfo",
                "summary": "Bulk operation for matching"
            }
        },
        "/pimitem/{unid}": {
            "summary": "Access a PIM item regardless of type",
            "get": {
                "tags": [
                    "mail"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {

                            }
                        },
                        "description": "Notes Notes in JSON format"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "getPimItem",
                "summary": "Returns an item from mail regardless of type",
                "description": "Universal document fetch"
            },
            "put": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "examples": {
                                "Field example": {
                                    "value": "{\n    \"Subject\" : \"Changed Subject\",\n}"
                                },
                                "AdditionalFields Example": {
                                    "value": {
                                        "AdditionalFields": {
                                            "l_metadata": "jones",
                                            "f_metadata": "jane"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "mail"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {

                            }
                        },
                        "description": "Updated Successfully"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "operationId": "updatePimItem",
                "summary": "Updates a item from mail regardless of type",
                "description": "Will update fields on a document in mail regardless of the type of document"
            },
            "parameters": [
                {
                    "name": "unid",
                    "description": "UniqueID of item",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                },
                {
                    "name": "mailboxid",
                    "description": "Optional, when omitted the default mailbox of the authenticated user is addressed. Only used in delegation access when owner and user are different.\nCould be: replicaid, filepath or owner shortname or email",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                }
            ]
        },
        "/notebook/{unid}": {
            "summary": "Notebook entry",
            "get": {
                "tags": [
                    "mail"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {

                            }
                        },
                        "description": "One entry"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "getNotebookEntry",
                "summary": "Retrieves a notebook entry"
            },
            "put": {
                "requestBody": {
                    "description": "Fields to update on the supplied unid notebook entry\n\nSample:\n```\n{\n    \"DiaryDate\": \"2020-07-14T13:00:00.000-04:00\",\n    \"Subject\": \"TEST FROM API: I am the updated subject\",\n    \"Body\": \"I am the updated body\",\n    \"Categories\": [\"Cat3\", \"Cat4\"]\n}\n```\n\nNotes:\n1. All fields are optional\n2. `Categories`:\n    - value can be either a `String` or an `Array` of `Strings` for multiple categories\n    - `\"Categories\": \"CAT1\"` and `\"Categories\": [\"CAT1\"]` will produce equal results but will become `Text` and `Text List` notes datatypes respectively.\n    - categories, if supplied, will replaced the categories in the note (not add to the list of existing categories)\n3. `DiaryDate` will default to current date/time when supplied as an empty value\n4. `DiaryDate` string will be parsed with format of `yyyy-MM-dd'T'HH:mm:ss.SSSXXX` \n\n",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NotebookInfo"
                            },
                            "examples": {
                                "updateSubject": {
                                    "value": {
                                        "Subject": "UPDATED BY PATCH!"
                                    }
                                },
                                "updateDiaryDateToTodayViaDefault": {
                                    "value": {
                                        "DiaryDate": ""
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "mail"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {

                            }
                        },
                        "description": "One entry"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "updateNotebookEntry",
                "summary": "Updates the content of a notebook entry"
            },
            "delete": {
                "tags": [
                    "mail"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {

                            }
                        },
                        "description": "One entry"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "deleteNotebookEntry",
                "summary": "Deletes a notebook entry"
            },
            "parameters": [
                {
                    "name": "mailboxid",
                    "description": "Optional, when omitted the default mailbox of the authenticated user is addressed. Only used in delegation access when owner and user are different.\nCould be: replicaid, filepath or owner shortname or email",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                },
                {
                    "name": "unid",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/notebook": {
            "summary": "Personal Notebook",
            "get": {
                "tags": [
                    "mail"
                ],
                "parameters": [
                    {
                        "name": "skip",
                        "description": "HOw many of the result entries shall be skipped.\nUsed for pagination. Default is 0",
                        "schema": {
                            "type": "integer"
                        },
                        "in": "query"
                    },
                    {
                        "name": "count",
                        "description": "How many entries shall be maximal returned?\nDefault is 1000",
                        "schema": {
                            "type": "integer"
                        },
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {

                                    }
                                }
                            }
                        },
                        "description": "List of Notebook entries"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "getNotebookEntries",
                "summary": "Gets a list of notebook entries"
            },
            "post": {
                "requestBody": {
                    "description": "A new Notebook entry\n\nSample:\n```\n{\n    \"DiaryDate\": \"2020-07-08T16:00:00.000-04:00\",\n    \"Subject\": \"TEST FROM API: I am the subject\",\n    \"Body\": \"I am the body\",\n    \"Categories\": [\"Cat1\", \"Cat2\"]\n}\n```\n\nNotes:\n1. All fields are optional\n2. `Categories`:\n    - value can be either a `String` or an `Array` of `Strings` for multiple categories\n    - `\"Categories\": \"CAT1\"` and `\"Categories\": [\"CAT1\"]` will produce equal results but will become `Text` and `Text List` notes datatypes respectively.\n3. `DiaryDate` will default to current date/time when supplied as an empty value\n4. `DiaryDate` string will be parsed with format of `yyyy-MM-dd'T'HH:mm:ss.SSSXXX` \n",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NotebookInfo"
                            },
                            "examples": {
                                "sample1": {
                                    "value": {
                                        "DiaryDate": "2020-07-08T16:00:00.000-04:00",
                                        "Subject": "TEST FROM API: I am the subject",
                                        "Body": "I am the body",
                                        "Categories": [
                                            "Cat1",
                                            "Cat2"
                                        ]
                                    }
                                },
                                "defaultToCurrentTimestampForDiaryDate": {
                                    "value": {
                                        "DiaryDate": "",
                                        "Subject": "TEST FROM API: I am the subject",
                                        "Body": "I am the body",
                                        "Categories": [
                                            "Cat1",
                                            "Cat2"
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "mail"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {

                            }
                        },
                        "description": "Successful creation object.\n\nSample:\n```\n{\n    \"status\": \"OK\",\n    \"statusCode\": 200,\n    \"message\": \"creation complete\",\n    \"unid\": \"7AD6BA770ED72488852585A0004AD64E\"\n}\n```"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "createNotebookEntry",
                "summary": "Adds an entry to a notebook"
            },
            "parameters": [
                {
                    "name": "mailboxid",
                    "description": "Optional, when omitted the default mailbox of the authenticated user is addressed. Only used in delegation access when owner and user are different.\nCould be: replicaid, filepath or owner shortname or email",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                }
            ]
        },
        "/public/group": {
            "summary": "List of all groups in a shared directory",
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "string"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "contacts"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {

                            }
                        },
                        "description": "Return informations of the created of group."
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "createPublicGroup",
                "summary": "Creates a shared group, requires access to group directory",
                "description": "Creates a shared group, requires access to group directory"
            },
            "parameters": [
                {
                    "name": "directoryid",
                    "description": "Name of the directory that contains the group. If omitted main addressbook is used",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                }
            ]
        },
        "/freetime": {
            "summary": "Check availability",
            "description": "Checks for the freetime entries for a given set of users\nin a given period of time",
            "post": {
                "requestBody": {
                    "description": "FreeTime Query",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FreeTimeQuery"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "calendar"
                ],
                "responses": {
                    "200": {
                        "description": "Successful Query"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "queryFreetime",
                "summary": "Obtain freetime information",
                "description": "retrieve freetime information"
            }
        },
        "/info/entries": {
            "summary": "Content counts",
            "description": "Provides information on mailbox content counts",
            "get": {
                "tags": [
                    "meta"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {

                                    }
                                }
                            }
                        },
                        "description": "Successful retrieval"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "getEntriesInfo",
                "summary": "Count and unread count of a mailbox",
                "description": "Count and unread count by document types"
            },
            "parameters": [
                {
                    "name": "mailboxid",
                    "description": "Alternate id for delegation",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                },
                {
                    "name": "includeUnreadCount",
                    "description": "Shall the number of unread documents be reported back",
                    "schema": {
                        "type": "boolean"
                    },
                    "in": "query"
                }
            ]
        },
        "/calendars": {
            "summary": "Interact with private and shared calendars",
            "get": {
                "tags": [
                    "calendar"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {

                            }
                        },
                        "description": "List of calendars"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "operationId": "getCalendars",
                "summary": "Retrieves list of calendars",
                "description": "Calendars can be\n\n- private only\n- private shared\n- public read only\n- public read/write"
            },
            "parameters": [
                {
                    "name": "mailboxid",
                    "description": "Optional, when omitted the default mailbox of the authenticated user is addressed. Only used in delegation access when owner and user are different.\nCould be: replicaid, filepath or owner shortname or email",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                }
            ]
        },
        "/subscription": {
            "summary": "Subscribe to change events by providing a callback URL",
            "description": "Changes can be document creation, deletion, update, arrival, folder operations etc.\nThere will be a limited set of information be transmitted",
            "post": {
                "requestBody": {
                    "description": "Details what needs to be subscribed to",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SubscriptionRequest"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "subscription"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SuccessMessage"
                                }
                            }
                        },
                        "description": "Sucessful subscription"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "createSubscription",
                "summary": "Creates a new subscription for data changes",
                "description": "Get changes in folder and documents"
            },
            "parameters": [
                {
                    "name": "mailboxid",
                    "description": "optional id to access delegated mailboxes",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                },
                {
                    "name": "UUID",
                    "description": "Request identifier to trace operation through many routes",
                    "schema": {
                        "type": "string"
                    },
                    "in": "header"
                }
            ]
        },
        "/subscription/{uuid}": {
            "summary": "Interact with one subscription",
            "get": {
                "tags": [
                    "subscription"
                ],
                "parameters": [
                    {
                        "name": "count",
                        "description": "How many elements to return",
                        "schema": {
                            "type": "integer"
                        },
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SubscriptionResult"
                                }
                            }
                        },
                        "description": "Subscription result"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "getSubscriptionResult",
                "summary": "Retrieve subscription results"
            },
            "delete": {
                "tags": [
                    "subscription"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {

                            }
                        },
                        "description": "sucessful remove"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "deleteSubscription",
                "summary": "remove a subscription"
            },
            "parameters": [
                {
                    "name": "mailboxid",
                    "description": "optional id to access delegated mailboxes",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                },
                {
                    "name": "UUID",
                    "description": "Request identifier to trace operation through many routes",
                    "schema": {
                        "type": "string"
                    },
                    "in": "header"
                },
                {
                    "name": "uuid",
                    "description": "ID of the subscription",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/attachments/{unid}": {
            "summary": "create an attachment",
            "description": "Create mail attachments, shim for a keep-core call",
            "post": {
                "requestBody": {
                    "description": "Attachment to be posted",
                    "content": {
                        "multipart/form-data": {

                        }
                    },
                    "required": true
                },
                "tags": [
                    "mail"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "examples": {
                                    "success": {
                                        "value": {
                                            "@unid": "94CA3B3B5E035D6048258471003639C6",
                                            "filename": "Profile.jpg"
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Successful creation"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "createPimAttachment",
                "summary": "Creates a new attachment in an existing document",
                "description": "The filename passed will be used, if unique. Otherwise a unique name will be evaluated from the passed filename."
            },
            "parameters": [
                {
                    "name": "mailboxid",
                    "description": "Optional, when omitted the default mailbox of the authenticated user is addressed. Only used in delegation access when owner and user are different.\nCould be: replicaid, filepath or owner shortname or email",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                },
                {
                    "name": "unid",
                    "description": "UniqueId of PIM document containing the attachment",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/taskresponses": {
            "summary": "Path used to manage the list of taskresponses.",
            "description": "The REST endpoint/path used to list and create zero or more `TaskResponse` entities.  This path contains a `GET` and `POST` operation to perform the list and create tasks, respectively.",
            "get": {
                "tags": [
                    "tasks"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/TaskResponse"
                                    }
                                }
                            }
                        },
                        "description": "Successful response - returns an array of `TaskResponse` entities."
                    }
                },
                "operationId": "gettaskresponses",
                "summary": "List All taskresponses",
                "description": "Gets a list of all `TaskResponse` entities."
            },
            "post": {
                "requestBody": {
                    "description": "A new `TaskResponse` to be created.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TaskResponse"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "tasks"
                ],
                "responses": {
                    "201": {
                        "description": "Successful response."
                    }
                },
                "operationId": "createTaskResponse",
                "summary": "Create a TaskResponse",
                "description": "Creates a new instance of a `TaskResponse`."
            }
        },
        "/taskresponses/{taskresponseId}": {
            "summary": "Path used to manage a single TaskResponse.",
            "description": "The REST endpoint/path used to get, update, and delete single instances of an `TaskResponse`.  This path contains `GET`, `PUT`, and `DELETE` operations used to perform the get, update, and delete tasks, respectively.",
            "get": {
                "tags": [
                    "tasks"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskResponse"
                                }
                            }
                        },
                        "description": "Successful response - returns a single `TaskResponse`."
                    }
                },
                "operationId": "getTaskResponse",
                "summary": "Get a TaskResponse",
                "description": "Gets the details of a single instance of a `TaskResponse`."
            },
            "put": {
                "requestBody": {
                    "description": "Updated `TaskResponse` information.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TaskResponse"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "tasks"
                ],
                "responses": {
                    "202": {
                        "description": "Successful response."
                    }
                },
                "operationId": "updateTaskResponse",
                "summary": "Update a TaskResponse",
                "description": "Updates an existing `TaskResponse`."
            },
            "delete": {
                "tags": [
                    "tasks"
                ],
                "responses": {
                    "204": {
                        "description": "Successful response."
                    }
                },
                "operationId": "deleteTaskResponse",
                "summary": "Delete a TaskResponse",
                "description": "Deletes an existing `TaskResponse`."
            },
            "parameters": [
                {
                    "name": "taskresponseId",
                    "description": "A unique identifier for a `TaskResponse`.",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/calendarresponse/{calid}/{calentryid}/": {
            "summary": "Calendar responses, incoming or outgoing with actions or action result",
            "description": "Methods to deal with reponses to meetings, get and update them",
            "get": {
                "tags": [
                    "calendar"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {

                                    }
                                }
                            }
                        },
                        "description": "List of responses, might be empty"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "getCalendarResponses",
                "summary": "provides an array of responses to a meeting sent",
                "description": "Accepted, Rejected, Counter Proposed, Penciled in etc."
            },
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {

                        }
                    },
                    "required": true
                },
                "tags": [
                    "calendar"
                ],
                "responses": {
                    "200": {
                        "description": "Creates a response to an invitation"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "404": {
                        "$ref": "#/components/responses/404notFound"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "createCalendarResponse",
                "summary": "creates a calendar response"
            },
            "parameters": [
                {
                    "name": "calid",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                },
                {
                    "name": "calentryid",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/labels": {
            "summary": "Label / Folder / View info",
            "description": "Interact with label / folder information - mail only1",
            "get": {
                "tags": [
                    "mail"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/LabelInfo"
                                    }
                                }
                            }
                        },
                        "description": "List of mailbox info"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "getLabels",
                "summary": "Retrieves label information",
                "description": "Info on what labels, how many documents are in there"
            },
            "parameters": [
                {
                    "name": "mailboxid",
                    "description": "Optional, when omitted the default mailbox of the authenticated user is addressed. Only used in delegation access when owner and user are different.\nCould be: replicaid, filepath or owner shortname or email",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                },
                {
                    "name": "includeSystemLabels",
                    "description": "Shall hidden and system Labels be included. Default = no",
                    "schema": {
                        "type": "boolean"
                    },
                    "in": "query"
                },
                {
                    "name": "includeUnreadCount",
                    "description": "Shall the number of unread documents be reported back",
                    "schema": {
                        "type": "boolean"
                    },
                    "in": "query"
                }
            ]
        },
        "/labels/all": {
            "summary": "Provides folder/label info for all PIM types",
            "description": "Interact with folder information from calendar, mail, contacts, tasks and Journal",
            "get": {
                "tags": [
                    "mail"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/LabelInfo"
                                    }
                                }
                            }
                        },
                        "description": "List of mailbox info"
                    },
                    "400": {
                        "$ref": "#/components/responses/400badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/401unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/403forbidden"
                    },
                    "500": {
                        "$ref": "#/components/responses/500serverError"
                    },
                    "501": {
                        "$ref": "#/components/responses/501notImplemented"
                    }
                },
                "security": [
                    {
                        "jwt": [
                        ]
                    }
                ],
                "operationId": "getLabelsAll",
                "summary": "Retrieves label information",
                "description": "Info on what labels, how many documents are in there"
            },
            "parameters": [
                {
                    "name": "mailboxid",
                    "description": "Optional, when omitted the default mailbox of the authenticated user is addressed. Only used in delegation access when owner and user are different.\nCould be: replicaid, filepath or owner shortname or email",
                    "schema": {
                        "type": "string"
                    },
                    "in": "query"
                },
                {
                    "name": "includeSystemLabels",
                    "description": "Shall hidden and system Labels be included. Default = no",
                    "schema": {
                        "type": "boolean"
                    },
                    "in": "query"
                },
                {
                    "name": "includeUnreadCount",
                    "description": "Shall the number of unread documents be reported back",
                    "schema": {
                        "type": "boolean"
                    },
                    "in": "query"
                }
            ]
        }
    },
    "components": {
        "schemas": {
            "ErrorMessage": {
                "title": "Root Type for ErrorMessage",
                "description": "Explains what went wrong",
                "type": "object",
                "properties": {
                    "code": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "message": {
                        "type": "string"
                    }
                },
                "example": {
                    "code": 403,
                    "message": "Invalid credentials provided"
                }
            },
            "ISODate": {
                "description": "Date/Time String in ISO 8601 format. Defined here:\nhttps://www.iso.org/iso-8601-date-and-time-format.html\nsee also:\nhttps://en.wikipedia.org/wiki/ISO_8601",
                "type": "string",
                "example": "2007-04-05T14:30Z"
            },
            "LabelInfo": {
                "title": "Root Type for LabelInfo",
                "description": "Information about a \"Label\" aka \"Folder\" aka \"View\"",
                "required": [
                    "FolderId"
                ],
                "type": "object",
                "properties": {
                    "count": {
                        "format": "int32",
                        "description": "Number of documents with this label. Does not include sublabels",
                        "type": "integer"
                    },
                    "isSystem": {
                        "description": "Is this a mandatory label/folder/view e.g. Inbox, Sent, All, Drafts",
                        "type": "boolean"
                    },
                    "name": {
                        "description": "Name of Folder/Label. When the name contains a backslash,\nit is a sublabel (Level = Number of backslashes)\nParent label might not exist",
                        "type": "string"
                    },
                    "unread": {
                        "format": "int32",
                        "description": "Number of unread documents",
                        "type": "integer"
                    },
                    "DisplayName": {
                        "description": "Name of a Folder/Label.",
                        "type": "string"
                    },
                    "FolderId": {
                        "description": "Unique Id of a folder.",
                        "type": "string"
                    },
                    "type": {
                        "description": "What type of folder/label is that (tentative): mail, contacts, tasks, calendar, journal",
                        "enum": [
                            "mail",
                            "contacts",
                            "tasks",
                            "calendar",
                            "journal"
                        ],
                        "type": "string"
                    }
                },
                "example": {
                    "FolderId": "38D46BF5E8F08834852564B500129B2C",
                    "count": 45,
                    "isSystem": true,
                    "name": "($Inbox)",
                    "unread": 12,
                    "DisplayName": "Inbox"
                }
            },
            "MailboxInfo": {
                "title": "Root Type for MailboxInfo",
                "description": "Informationa about an individual mailbox. Might be accessed by mailbox owner or delegates",
                "type": "object",
                "properties": {
                    "Title": {
                        "description": "Title of Mailbox. Typically the Owner's name",
                        "type": "string"
                    },
                    "count": {
                        "format": "int32",
                        "description": "Number of documents in mailbox",
                        "type": "integer"
                    },
                    "delegates": {
                        "description": "List of people who have access\n(TODO: revisit data type)",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "filepath": {
                        "description": "Path on server of mailbox",
                        "type": "string"
                    },
                    "replicaid": {
                        "description": "Domain unique identifier of mailbox",
                        "type": "string"
                    },
                    "unread": {
                        "format": "int32",
                        "type": "integer"
                    }
                },
                "example": {
                    "Title": "John Doe's Mailbox",
                    "count": 564394,
                    "delegates": [
                        "Frank.herbert@dune.net",
                        "Jane.doe@unknown.org"
                    ],
                    "filepath": "mail/jdoe.nsf",
                    "replicaid": "AE45F902",
                    "unread": 456
                }
            },
            "MessageBody": {
                "title": "Root Type for MessageBody",
                "description": "Actual content of a message.\nInspired from here:\nhttps://developers.google.com/gmail/api/v1/reference/users/messages/attachments#resource",
                "required": [
                    "content-type",
                    "message"
                ],
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string"
                    },
                    "content-type": {
                        "type": "string"
                    },
                    "encoding": {
                        "type": "string"
                    }
                },
                "example": {
                    "message": "fsdkewrkwek==",
                    "content-type": "text/html",
                    "encoding": "Base64"
                }
            },
            "MessageHeaders": {
                "description": "Reflects MIMEPart in MIME messages. Composed of a header and a body,\ncarries a Mime Type. Each message has one root Message part,\nthat may contain 0:n MessageParts. Inception long before the movie\nInspired by:\nhttps://developers.google.com/gmail/api/v1/reference/users/messages",
                "type": "object",
                "properties": {
                    "Content-Alternative": {
                        "$ref": "#/components/schemas/MimeHeaderValue",
                        "description": "MIME [RFC4021]"
                    },
                    "Content-Description": {
                        "$ref": "#/components/schemas/MimeHeaderValue",
                        "description": "MIME [RFC4021]"
                    },
                    "Content-Disposition": {
                        "$ref": "#/components/schemas/MimeHeaderValue",
                        "description": "MIME [RFC4021]"
                    },
                    "Content-Duration": {
                        "$ref": "#/components/schemas/MimeHeaderValue",
                        "description": "MIME [RFC4021]"
                    },
                    "Content-ID": {
                        "$ref": "#/components/schemas/MimeHeaderValue",
                        "description": "MIME [RFC4021]"
                    },
                    "Content-Language": {
                        "$ref": "#/components/schemas/MimeHeaderValue",
                        "description": "MIME [RFC4021]"
                    },
                    "Content-Location": {
                        "$ref": "#/components/schemas/MimeHeaderValue",
                        "description": "MIME [RFC4021]"
                    },
                    "Content-MD5": {
                        "$ref": "#/components/schemas/MimeHeaderValue",
                        "description": "MIME [RFC4021]"
                    },
                    "Content-Transfer-Encoding": {
                        "$ref": "#/components/schemas/MimeHeaderValue",
                        "description": "MIME [RFC4021]"
                    },
                    "Content-Translation-Type": {
                        "$ref": "#/components/schemas/MimeHeaderValue",
                        "description": "MIME [RFC8255]"
                    },
                    "Content-Type": {
                        "$ref": "#/components/schemas/MimeHeaderValue",
                        "description": "RFC2045 - description what type of content the part is: typical values are Mime/multipart, text/html, text/plain, multipart/related, multipart/mixed as well as binary formats"
                    },
                    "Content-features": {
                        "$ref": "#/components/schemas/MimeHeaderValue",
                        "description": "MIME [RFC4021]"
                    },
                    "MIME-Version": {
                        "$ref": "#/components/schemas/MimeHeaderValue",
                        "description": "Nothing beyond 1.0 worked so far"
                    }
                },
                "additionalProperties": {
                    "$ref": "#/components/schemas/MimeHeaderValue",
                    "description": "Additional header values not enumerated here, Notes fields"
                }
            },
            "MessageListItemArray": {
                "description": "Entry in a message list, can be String, Date or Number -- or an array of those",
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/MessageListItem"
                }
            },
            "MimeHeaderValue": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ISODate"
                    },
                    {
                        "$ref": "#/components/schemas/RFC822Address"
                    },
                    {
                        "type": "string"
                    }
                ],
                "description": "RFC 2231 suggests Mime header values are text only.\nHowever for the purpose of processing they could\ncontain number or date style values, so we distinguish them here.\nFull list of message headers here: RFC3864\nhttps://www.iana.org/assignments/message-headers/message-headers.xhtml",
                "type": "object"
            },
            "RFC822Address": {
                "description": "Internet format for eMail addresses, specified here: https://www.w3.org/Protocols/rfc822/",
                "type": "string",
                "example": "\"peter.pan@disney.com\"\n\"john.doe@unknown.org (John Doe)\"\n\"\\\"Jane Doe\\\" <jane@tarzan.org>\""
            },
            "SearchQuery": {
                "description": "Search query to be executed by DQL",
                "type": "object",
                "properties": {
                    "maxScanDocs": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "maxScanEntries": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "noViews": {
                        "type": "boolean"
                    },
                    "query": {
                        "description": "Query in DQL format",
                        "type": "string"
                    },
                    "timeoutSecs": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "variables": {
                        "type": "object",
                        "properties": {
                            "Color": {
                                "type": "string"
                            },
                            "Pet": {
                                "type": "string"
                            }
                        }
                    },
                    "viewRefresh": {
                        "type": "boolean"
                    }
                },
                "example": {
                    "maxScanDocs": 500000,
                    "maxScanEntries": 200000,
                    "noViews": false,
                    "query": "form = 'Customer' and Color = ?Color",
                    "timeoutSecs": 300,
                    "variables": {
                        "Color": "Maroon",
                        "Pet": "Giraffe"
                    },
                    "viewRefresh": true
                }
            },
            "MessageListString": {
                "description": "A String in a message list",
                "type": "string"
            },
            "MessageListNumber": {
                "description": "A number value in a message list",
                "type": "number"
            },
            "MessagePart": {
                "description": "Reflects MIMEPart in MIME messages. Composed of a header and a body,\ncarries a Mime Type. Each message has one root Message part,\nthat may contain 0:n MessageParts. Inception long before the movie\n\nParts is an Array of messageParts, but that can't be modeled here since\nmost JsonSchema can't deal with recursion\n\nInspired by:\nhttps://developers.google.com/gmail/api/v1/reference/users/messages",
                "type": "object",
                "properties": {
                    "Body": {
                        "$ref": "#/components/schemas/MessageBody",
                        "description": "Actual body with Base64 encoded message / attachment and size information"
                    },
                    "Headers": {
                        "$ref": "#/components/schemas/MessageHeaders",
                        "description": "Header fields as part of a Messagepart, mainly RFC4021"
                    },
                    "Parts": {
                        "description": "Mime parts that are included in this mime part"
                    }
                }
            },
            "MessageListItem": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ISODate"
                    },
                    {
                        "$ref": "#/components/schemas/RFC822Address"
                    },
                    {
                        "$ref": "#/components/schemas/MessageListString"
                    }
                ],
                "description": "Entry in a message list, can be String, eMail, Date or Number"
            },
            "SuccessMessage": {
                "title": "Root Type for ErrorMessage",
                "description": "Explains what went wrong",
                "required": [
                    "Id"
                ],
                "type": "object",
                "properties": {
                    "code": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "message": {
                        "type": "string"
                    },
                    "id": {
                        "description": "Id of the sucessfull created or deleted item",
                        "type": "string"
                    }
                },
                "example": {
                    "code": 201,
                    "message": "New calendar created",
                    "id": "eor8yuoweyrpweyur"
                }
            },
            "OOORequest": {
                "title": "Root Type for OOORequest",
                "description": "Format how to query OOO Status",
                "type": "object",
                "properties": {
                    "people": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "example": {
                    "people": [
                        "john@doe.net",
                        "jane.doe@anonymous.com",
                        "peter.pan@disney.com"
                    ]
                }
            },
            "RuleInfo": {
                "title": "Root Type for RuleInfo",
                "description": "Payload to create a Mail rule",
                "type": "object",
                "properties": {
                    "Enable": {
                        "type": "string"
                    },
                    "ConditionList": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "ActionList": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tokConditionList": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "TokActionList": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "example": {
                    "Enable": "1",
                    "ConditionList": [
                        "   Sender contains @junk"
                    ],
                    "ActionList": [
                        " move to folder ($JunkMail)"
                    ],
                    "tokConditionList": [
                        "1¦1¦@junk¦0"
                    ],
                    "TokActionList": [
                        "1¦1¦($JunkMail)"
                    ]
                }
            },
            "RulesInfo": {
                "title": "Root Type for RulesInfo",
                "description": "Payload to create multiple Mail rules",
                "type": "object",
                "properties": {
                    "Rules": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "Enable": {
                                    "type": "string"
                                },
                                "ConditionList": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                },
                                "ActionList": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                },
                                "tokConditionList": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                },
                                "TokActionList": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "example": {
                    "Rules": [
                        {
                            "Enable": "1",
                            "ConditionList": [
                                "   Sender contains @junk"
                            ],
                            "ActionList": [
                                " move to folder ($JunkMail)"
                            ],
                            "tokConditionList": [
                                "1¦1¦@junk¦0"
                            ],
                            "TokActionList": [
                                "1¦1¦($JunkMail)"
                            ]
                        },
                        {
                            "Enable": "1",
                            "ConditionList": [
                                "   Sender contains @junk"
                            ],
                            "ActionList": [
                                " move to folder ($JunkMail)"
                            ],
                            "tokConditionList": [
                                "1¦1¦@junk¦0"
                            ],
                            "TokActionList": [
                                "1¦1¦($JunkMail)"
                            ]
                        }
                    ]
                }
            },
            "Message": {
                "description": "An eMail message, stored natively as MIME. Represented as JSON Object.",
                "required": [
                    "from",
                    "to",
                    "body"
                ],
                "type": "object",
                "properties": {
                    "to": {
                        "description": "Receipients of a message RFC822 format",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RFC822Address"
                        }
                    },
                    "bccto": {
                        "description": "BlindCopyTo - recipients who are not seen by any others. Big surprise when they hit replytoall RFC822 format",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RFC822Address"
                        }
                    },
                    "subject": {
                        "description": "Subject line of an eMail message. Must not be empty when sending",
                        "type": "string"
                    },
                    "body": {
                        "$ref": "#/components/schemas/MessageBody",
                        "description": ""
                    },
                    "priority": {
                        "format": "int32",
                        "description": "It has numeric values:\n1 - High Priority\n2 - Normal Priority\n3 - Low Priority",
                        "type": "integer"
                    },
                    "from": {
                        "description": "The details of sender of email",
                        "type": "string"
                    },
                    "copyto": {
                        "description": "Receipients who should get a copy (FYI mode) RFC822 Format",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RFC822Address"
                        }
                    }
                },
                "example": {
                    "to": [
                        "John Doe <johndoe@marauders.com>",
                        "RJ De Jesus <rj@hcl.com>"
                    ],
                    "copyto": [
                        "John Doe <johndoe@marauders.com>"
                    ],
                    "bccto": [
                        "johndoe@marauders.com",
                        "rj@hcl.com"
                    ],
                    "subject": "Sample Email",
                    "body": {
                        "message": "PGh0bWwgeG1sbnM6bz0zRCJ1cm46c2NoZW1hcy1taWNyb3NvZnQtY29tOm9mZmljZTpvZmZpY2UiIHhtbG5zOnc9M0QidXJuOnNjaGVtYT1zLW1pY3Jvc29mdC1jb206b2ZmaWNlOndvcmQiDQoJeG1sbnM6bT0zRCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL29mZmljZS8yMD0gMDQvMTIvb21tbCIgeG1sbnM9M0QiaHR0cDovL3d3dy53My5vcmcvVFIvUkVDLWh0bWw0MCI+IDxoZWFkPg0KPG1ldGEgaHR0cC1lcXVpdj0zREM9b250ZW50LVR5cGUgY29udGVudD0zRCJ0ZXh0L2h0bWw7IGNoYXJzZXQ9M0R1dGYtOCI+DQo8bWV0YSBuYW1lPTNER2VuZXJhdG9yIGNvbnRlbnQ9M0Q9Ik1pY3Jvc29mdCBXb3JkIDE1IChmaWx0ZXJlZCBtZWRpdW0pIj4NCjxzdHlsZT4NCgk8IS0tDQoJLyogRm9udCBEZWZpbml0aW9ucyAqLw0KCUBmb250LWZhY2Ugew0KCQlmb250LWZhbWlseTogIkNhbWJyaWEgTWF0aCI7DQoJCXBhbm9zZS0xOiAyIDQgNSAzIDUgNCA2IDMgMiA0Ow0KCX0NCg0KCUBmb250LWZhY2Ugew0KCQlmb250LWZhbWlseTogQ2FsaWJyaTsNCgkJcGFub3NlLTE6IDIgMTUgNSAyIDIgMiA0IDMgMiA0Ow0KCX0NCg0KCS8qIFN0eWxlIERlZmluaXRpb25zICovDQoJcC5Nc29Ob3JtYWwsDQoJbGkuTXNvTm9ybWFsLA0KCWRpdi5Nc29Ob3JtYWwgew0KCQltYXJnaW46IDBpbjsNCgkJbWFyZ2luLWJvdHRvbTogLjAwMDFwdDsNCgkJZm9udC1zaXplOiAxMS4wcHQ7DQoJCWZvbnQtZmFtaWx5OiAiQ2FsaWJyaSIsIHNhbnMtc2VyaWY7DQoJfQ0KDQoJc3Bhbi5FbWFpbFN0eWxlMTcgew0KCQltc28tc3R5bGUtdHlwZTogcGVyc29uYWwtY29tcG9zZTsNCgkJZm9udC1mYW1pbHk6ICJDYWxpYnJpIiwgc2Fucy1zZXJpZjsNCgkJY29sb3I6IHdpbmRvd3RleHQ7DQoJfQ0KDQoJLk1zb0NocERlZmF1bHQgew0KCQltc28tc3R5bGUtdHlwZTogZXhwb3J0LW9ubHk7DQoJCWZvbnQtZmFtaWx5OiAiQ2FsaWJyaSIsIHNhbnMtc2VyaWY7DQoJfQ0KDQoJQHBhZ2UgV29yZFNlY3Rpb24xIHsNCgkJc2l6ZTogOC41aW4gMTEuMGluOw0KCQltYXJnaW46IDEuMGluIDEuMGluIDEuMGluIDEuMGluOw0KCX0NCg0KCWRpdi5Xb3JkU2VjdGlvbjEgew0KCQlwYWdlOiBXb3JkU2VjdGlvbjE7DQoJfQ0KCS0tPg0KPC9zdHlsZT4NCjwvaGVhZD4NCg0KPGJvZHkgbGFuZz0zREVOLVVTIGxpbms9M0QiIzA1NjNDMSIgdmxpbms9M0QiIzk1NEY3MiI+DQoJPGRpdiBjbGFzPXM9M0RXb3JkU2VjdGlvbjE+DQoJCTxwIGNsYXNzPTNETXNvTm9ybWFsPlRoaXMgaXMgYSB0ZXN0IGVtYWlsDQoJCQk8bzpwPjwvbzpwPg0KCQk8L3A+DQoJPC9kaXY+DQo8L2JvZHk+DQoNCjwvaHRtbD4=",
                        "content-type": "text/html; charset=utf-8",
                        "encoding": "Base64"
                    },
                    "priority": 1,
                    "from": "RJ De Jesus <rj@hcl.com>"
                }
            },
            "PersonalMailingList": {
                "title": "Root Type for PersonalMailingList",
                "description": "",
                "type": "object",
                "properties": {
                    "listName": {
                        "type": "string"
                    },
                    "Members": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "example": {
                    "listName": "TestTeam",
                    "Members": [
                        "auser@test",
                        "buser@test"
                    ]
                }
            },
            "LabelActionInfo": {
                "title": "Root Type for LabelActionInfo",
                "description": "Add, remove or move documents to label.",
                "type": "object",
                "properties": {
                    "add": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "remove": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "move": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "DisplayName": {
                        "description": "Name of Folder/Label",
                        "type": "string"
                    },
                    "DesignType": {
                        "description": "Design of Folder/Label",
                        "type": "string"
                    },
                    "ParentId": {
                        "description": "Unique Id of Label/Folder where subfolder is located",
                        "type": "string"
                    }
                },
                "example": {
                    "add": [
                        "5EE9B0814D21E8D548258592004AB1FF",
                        "45701224E2314352482585820043973A"
                    ],
                    "remove": [
                        "5EE9B0814D21E8D548258592004AB1FF",
                        "3CD93CD3FED5A9B94825858200439738"
                    ],
                    "move": [
                        "5EE9B0814D21E8D548258592004AB1FF",
                        "AB0E398C5737F8B14825858200439737"
                    ]
                }
            },
            "NotebookInfo": {
                "title": "Root Type for NotebookInfo",
                "description": "Payload to create a notebook entry",
                "type": "object",
                "properties": {
                    "DiaryDate": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "Subject": {
                        "type": "string"
                    },
                    "Body": {
                        "type": "string"
                    },
                    "Categories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "example": {
                    "DiaryDate": "2020-07-14T13:00:00.000-04:00",
                    "Subject": "TEST FROM API: I am the subject",
                    "Body": "I am the body",
                    "Categories": [
                        "Cat1",
                        "Cat2"
                    ]
                }
            },
            "FreeTimeQuery": {
                "title": "Root Type for FreeTimeQuery",
                "description": "Data Structure for enquiry of available time slots per user",
                "required": [
                    "endDate",
                    "startDate",
                    "users"
                ],
                "type": "object",
                "properties": {
                    "startDate": {
                        "format": "date-time",
                        "description": "Beginning of the query period",
                        "type": "string"
                    },
                    "endDate": {
                        "format": "date-time",
                        "description": "End of the query period",
                        "type": "string"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "example": {
                    "startDate": "2020-08-01T14:23:00Z",
                    "endDate": "2020-08-03T14:23:00Z",
                    "users": [
                        "john.doe@quattro.rocks",
                        "jane.doe@quattro.rocks"
                    ]
                }
            },
            "UpdateMessageProperty": {
                "title": "Root Type for UpdateMessagePropertyRequest",
                "description": "This is the parameter block for the UpdateMessageProperties request.  It allows a client to change common message propeerties on a list of documents with one request.",
                "type": "object",
                "properties": {
                    "unreadOn": {
                        "description": "Turns on the unread flag.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "unreadOff": {
                        "description": "Turns off the unread flag.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "quickFlagOn": {
                        "description": "Turns on the quick flag.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "quickFlagOff": {
                        "description": "Turns off the quick flag.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "softDeleteOn": {
                        "description": "Turns on the soft delete flag.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "softDeleteOff": {
                        "description": "Turns off the soft delete flag.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "example": {
                    "quickFlagOn": [
                        "unid",
                        "unid"
                    ],
                    "quickFlagOff": [
                        "unid",
                        "unid"
                    ],
                    "softDeleteOn": [
                        "unid",
                        "unid"
                    ],
                    "softDeleteOff": [
                        "unid",
                        "unid"
                    ],
                    "unreadeOn": [
                        "unid",
                        "unid"
                    ],
                    "unreadOff": [
                        "unid",
                        "unid"
                    ]
                }
            },
            "SubscriptionResult": {
                "title": "Root Type for SubscriptionResult",
                "description": "When a subscription is a pull, provides result items",
                "required": [
                    "events"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "description": "Echo of the subscription id",
                        "type": "string"
                    },
                    "more": {
                        "description": "Are there more events than the requested number?",
                        "type": "boolean"
                    },
                    "events": {
                        "description": "All events that happened",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SubscriptionResultItem"
                        }
                    }
                },
                "example": {
                    "id": "subscriptionid",
                    "more": true,
                    "events": [
                        {
                            "id": "timestamp",
                            "eventType": "create",
                            "folderId": "uuid",
                            "itemId": "uuid"
                        },
                        {
                            "id": "timestamp2",
                            "eventType": "copy",
                            "folderId": "uuid2",
                            "itemId": "uuid"
                        }
                    ]
                }
            },
            "CallbackEndpoint": {
                "title": "Root Type for CallbackEndpoint",
                "description": "URL and authorization for callbacks ",
                "type": "object",
                "properties": {
                    "url": {
                        "type": "string"
                    },
                    "bearer": {
                        "type": "string"
                    }
                },
                "example": {
                    "url": "http://callback",
                    "bearer": "Something-to-authenticate"
                }
            },
            "SubscriptionRequest": {
                "title": "Root Type for SubscriptionRequest",
                "description": "Subscribe to changes in a list of \"folders\" and subfolders to get notified using pull or push (or stream) when changes occured",
                "required": [
                    "eventTypes",
                    "folders",
                    "expiry",
                    "id",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "description": "Subscription Id",
                        "type": "string"
                    },
                    "type": {
                        "description": "Type of subscription",
                        "enum": [
                            "pull",
                            "push",
                            "streaming"
                        ],
                        "type": "string"
                    },
                    "endpoint": {
                        "$ref": "#/components/schemas/CallbackEndpoint",
                        "description": "Optional endpoint description for push/stream"
                    },
                    "folders": {
                        "description": "UNIDs of folders to monitor",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "eventTypes": {
                        "description": "Type of events to monitor",
                        "type": "array",
                        "items": {
                            "enum": [
                                "create",
                                "copy",
                                "delete",
                                "modify",
                                "move"
                            ],
                            "type": "string"
                        }
                    },
                    "expiry": {
                        "format": "int32",
                        "description": "Expiry time in minutes",
                        "type": "integer"
                    },
                    "includeSubfolders": {
                        "description": "Does the subscription include subfolders",
                        "type": "boolean"
                    }
                },
                "example": {
                    "id": "some string",
                    "type": "pull",
                    "endpoint": {
                        "url": "http://callback",
                        "bearer": "Something-to-authenticate"
                    },
                    "folders": [
                        "uuid",
                        "uuid2",
                        "uuid3"
                    ],
                    "eventTypes": [
                        "create",
                        "copy",
                        "delete",
                        "modify",
                        "move"
                    ],
                    "expiry": 60
                }
            },
            "SubscriptionResultItem": {
                "title": "Root Type for SubscriptionResultItem",
                "description": "One line of a subscription result",
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "eventType": {
                        "type": "string"
                    },
                    "folderId": {
                        "type": "string"
                    },
                    "itemId": {
                        "type": "string"
                    }
                },
                "example": {
                    "id": "timestamp",
                    "eventType": "create",
                    "folderId": "uuid",
                    "itemId": "uuid"
                }
            },
            "TaskResponse": {
                "description": "Details of a \"Task\" that is being retrieved.",
                "type": "object",
                "properties": {
                    "Body": {
                        "description": "The detailed content of the task."
                    },
                    "Subject": {
                        "description": "Initial header or title of the task"
                    },
                    "Start": {
                        "description": "The start date of a task"
                    },
                    "Due": {
                        "description": "Due date of a task"
                    },
                    "DueState": {
                        "description": "Current state of a task. \"Completed\", \"In Progress\", \"Not Started\", \"Overdue\" or \"Rejected\""
                    },
                    "TaskStatus": {
                        "description": "Current state of a task. \"Completed\", \"In Progress\", \"Not Started\", \"Overdue\" or \"Rejected\""
                    },
                    "From": {
                        "description": "The one who creates and/or sends the task."
                    },
                    "Confidential": {
                        "description": "the confidentiality of a task. Either true or false."
                    },
                    "Priority": {
                        "description": "Prioritization of a task. \"High\", \"Medium\" or \"Low\""
                    },
                    "Completed": {
                        "description": "The date when the task was finished."
                    },
                    "Categories": {
                        "description": "The type or tags of a task."
                    },
                    "ParentFolder": {
                        "description": "The unique ID of the folder/view where the task is located."
                    },
                    "Files": {
                        "description": "Name of the file that is uploaded in the task."
                    },
                    "AlarmOffset": {
                        "description": "Time on when then alarm is set for notification."
                    },
                    "AlarmOffsetUnit": {
                        "description": "Unit of measurement used by the alarm. \"D\" (days), \"H\" (hours), \"M\" (minutes), \"S\" (seconds)"
                    },
                    "Form": {
                        "description": "The document type being processed."
                    }
                }
            },
            "TaskRequest": {
                "description": "Send details to create a task.",
                "type": "object",
                "properties": {
                    "Subject": {
                        "description": "Title of the task.",
                        "type": "string"
                    },
                    "TaskType": {
                        "description": "Assign the task to self or to others.",
                        "type": "string"
                    },
                    "DueDate": {
                        "description": "Deadline of the task."
                    },
                    "DueState": {
                        "description": "Status of the task."
                    },
                    "Importance": {
                        "description": "The priority of the task.",
                        "type": "string"
                    },
                    "StartDate": {
                        "description": "Date when the task started.",
                        "type": "string"
                    },
                    "Categories": {
                        "description": "The types or tags of a task."
                    },
                    "Body": {
                        "description": "The detailed content or description of the task."
                    },
                    "AssignedTo": {
                        "description": "To whom the task is assigned. (For task that is assigned to others)"
                    },
                    "OptionalAssignedTo": {
                        "description": "To whom the task is assigned but optional. (For task that is assigned to others)"
                    }
                }
            },
            "Alert": {
                "type": "object",
                "properties": {
                    "foo": {
                        "type": "string"
                    },
                    "bar": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 128
                    }
                },
                "required": [
                    "foo",
                    "bar"
                ]
            },
            "CalendarEvent": {
                "type": "object",
                "properties": {
                    "flerg": {
                        "type": "string"
                    }
                }
            }
        },
        "responses": {
            "400badRequest": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ErrorMessage"
                        }
                    }
                },
                "description": "Invalid request. Shows up when submission is flaky:\n- Wrong authentication\n- Wrong content-type\n- Missing or wrong parameter types"
            },
            "401unauthorized": {
                "description": "The system doesn't recognize you, please try with new credentials"
            },
            "403forbidden": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ErrorMessage"
                        },
                        "examples": {
                            "Unauthorized": {
                                "value": {
                                    "message": "Nice try chap, ask before next time",
                                    "status": 403
                                }
                            }
                        }
                    }
                },
                "description": "Forbidden. We know who you are, you just can't do this"
            },
            "404notFound": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ErrorMessage"
                        },
                        "examples": {
                            "NotFound": {
                                "value": {
                                    "message": "This is not the data you seek!",
                                    "status": 404
                                }
                            }
                        }
                    }
                },
                "description": "Content not found"
            },
            "405methodNotAllowed": {
                "description": "Method not allowed. You tried a GET where POST rulez or POST to an GET url.\nDetails in the Allow header"
            },
            "406notAcceptable": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ErrorMessage"
                        },
                        "examples": {
                            "GenericRejection": {
                                "value": {
                                    "details": "The haferlup needs left turning shrufti",
                                    "message": "This is not a supported operation. Try again",
                                    "status": 406
                                }
                            }
                        }
                    }
                },
                "description": "Invalid operation - something got requested that isn't supported\nLike accpt XML but we only produce JSON"
            },
            "415unsupportedMediaType": {
                "description": "Client uploads data in a format we don't understand\ne.g. XML when we only accept JSON"
            },
            "500serverError": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ErrorMessage"
                        },
                        "examples": {
                            "GenericError": {
                                "value": {
                                    "details": "Dreaded pirate NullPointer",
                                    "message": "Sorry pal, we screwed up",
                                    "status": 500
                                }
                            }
                        }
                    }
                },
                "description": "The server screwed up. Like NullPointers and stuff"
            },
            "501notImplemented": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ErrorMessage"
                        },
                        "examples": {
                            "NextVersion": {
                                "value": {
                                    "details": "We do sprints, not marathons",
                                    "message": "Not now, maybe tomorrow",
                                    "status": 501
                                }
                            }
                        }
                    }
                },
                "description": "Working on it, just not yet.\nDefining APIs is faster than implementing them"
            },
            "201Created": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/SuccessMessage"
                        }
                    }
                },
                "description": "Successful creation of a resource.\nReturns the ID and sometimes data"
            }
        },
        "securitySchemes": {
            "jwt": {
                "scheme": "bearer",
                "type": "http",
                "description": "Regular access using JWT. Login/Logout to be handled by external provider or KEEP core API"
            }
        }
    },
    "security": [
        {
            "jwt": [
            ]
        }
    ],
    "tags": [
        {
            "name": "mail",
            "description": "APIs related to create, send, retrieve and search eMail messages"
        },
        {
            "name": "calendar",
            "description": "Access to create, edit, send, propagate and act on calendar entries"
        },
        {
            "name": "settings",
            "description": "Configuration, Preferences & Settings to change behaviour of the API"
        },
        {
            "name": "meta",
            "description": "Endpoint that produce information about the API. Like OpenAPI spec, statistics etc"
        },
        {
            "name": "tasks",
            "description": "Endpoints related to task management"
        },
        {
            "name": "contacts",
            "description": "interact with contacts related endpoints"
        },
        {
            "name": "subscription",
            "description": "All endpoits for subscribing and retrieving changes. Mostly used by EWS"
        }
    ]
}