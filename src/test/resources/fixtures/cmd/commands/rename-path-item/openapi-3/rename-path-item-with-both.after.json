{
  "openapi": "3.0.2",
  "info": {
    "title": "Test 3.0 API",
    "description": "Just a test of a **3.0** API!",
    "version": "1.0.0"
  },
  "paths": {
    "/beers": {
      "summary": "Path used to manage the list of Beers.",
      "description": "The REST endpoint/path used to list and create zero or more `Beer` entities.  This path contains a `GET` and `POST` operation to perform the list and create tasks, respectively.",
      "get": {
        "summary": "List All Beers",
        "description": "Gets a list of all `Beer` entities.",
        "operationId": "getBeers",
        "responses": {
          "200": {
            "description": "Successful response - returns an array of `Beer` entities.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Beer"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a Beer",
        "description": "Creates a new instance of a `Beer`.",
        "operationId": "createBeer",
        "requestBody": {
          "description": "A new `Beer` to be created.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Beer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful response."
          }
        }
      }
    },
    "/brews/{brewType}": {
      "summary": "Path used to manage a single Beer.",
      "description": "The REST endpoint/path used to get, update, and delete single instances of an `Beer`.  This path contains `GET`, `PUT`, and `DELETE` operations used to perform the get, update, and delete tasks, respectively.",
      "get": {
        "summary": "Get a Beer",
        "description": "Gets the details of a single instance of a `Beer`.",
        "operationId": "getBeer",
        "responses": {
          "200": {
            "description": "Successful response - returns a single `Beer`.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Beer"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a Beer",
        "description": "Updates an existing `Beer`.",
        "operationId": "updateBeer",
        "requestBody": {
          "description": "Updated `Beer` information.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Beer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful response."
          }
        }
      },
      "delete": {
        "summary": "Delete a Beer",
        "description": "Deletes an existing `Beer`.",
        "operationId": "deleteBeer",
        "responses": {
          "204": {
            "description": "Successful response."
          }
        }
      },
      "parameters": [
        {
          "name": "brewType",
          "in": "path",
          "description": "A unique identifier for a `Beer`.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/songs": {
      "summary": "Path used to manage the list of Songs.",
      "description": "The REST endpoint/path used to list and create zero or more `Song` entities.  This path contains a `GET` and `POST` operation to perform the list and create tasks, respectively.",
      "get": {
        "summary": "List All Songs",
        "description": "Gets a list of all `Song` entities.",
        "operationId": "getSongs",
        "responses": {
          "200": {
            "description": "Successful response - returns an array of `Song` entities.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Song"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a Song",
        "description": "Creates a new instance of a `Song`.",
        "operationId": "createSong",
        "requestBody": {
          "description": "A new `Song` to be created.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Song"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful response."
          }
        }
      }
    },
    "/songs/{songId}": {
      "summary": "Path used to manage a single Song.",
      "description": "The REST endpoint/path used to get, update, and delete single instances of an `Song`.  This path contains `GET`, `PUT`, and `DELETE` operations used to perform the get, update, and delete tasks, respectively.",
      "get": {
        "summary": "Get a Song",
        "description": "Gets the details of a single instance of a `Song`.",
        "operationId": "getSong",
        "responses": {
          "200": {
            "description": "Successful response - returns a single `Song`.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Song"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a Song",
        "description": "Updates an existing `Song`.",
        "operationId": "updateSong",
        "requestBody": {
          "description": "Updated `Song` information.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Song"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful response."
          }
        }
      },
      "delete": {
        "summary": "Delete a Song",
        "description": "Deletes an existing `Song`.",
        "operationId": "deleteSong",
        "responses": {
          "204": {
            "description": "Successful response."
          }
        }
      },
      "parameters": [
        {
          "name": "songId",
          "in": "path",
          "description": "A unique identifier for a `Song`.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/geese": {
      "summary": "Path used to manage the list of Geese.",
      "description": "The REST endpoint/path used to list and create zero or more `Goose` entities.  This path contains a `GET` and `POST` operation to perform the list and create tasks, respectively.",
      "get": {
        "summary": "List All Geese",
        "description": "Gets a list of all `Goose` entities.",
        "operationId": "getGeese",
        "responses": {
          "200": {
            "description": "Successful response - returns an array of `Goose` entities.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Goose"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a Goose",
        "description": "Creates a new instance of a `Goose`.",
        "operationId": "createGoose",
        "requestBody": {
          "description": "A new `Goose` to be created.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Goose"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful response."
          }
        }
      }
    },
    "/geese/{gooseId}": {
      "summary": "Path used to manage a single Goose.",
      "description": "The REST endpoint/path used to get, update, and delete single instances of an `Goose`.  This path contains `GET`, `PUT`, and `DELETE` operations used to perform the get, update, and delete tasks, respectively.",
      "get": {
        "summary": "Get a Goose",
        "description": "Gets the details of a single instance of a `Goose`.",
        "operationId": "getGoose",
        "responses": {
          "200": {
            "description": "Successful response - returns a single `Goose`.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Goose"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a Goose",
        "description": "Updates an existing `Goose`.",
        "operationId": "updateGoose",
        "requestBody": {
          "description": "Updated `Goose` information.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Goose"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful response."
          }
        }
      },
      "delete": {
        "summary": "Delete a Goose",
        "description": "Deletes an existing `Goose`.",
        "operationId": "deleteGoose",
        "responses": {
          "204": {
            "description": "Successful response."
          }
        }
      },
      "parameters": [
        {
          "name": "gooseId",
          "in": "path",
          "description": "A unique identifier for a `Goose`.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/brews/{brewType}/suds": {
      "get": {},
      "post": {},
      "parameters": [
        {
          "name": "brewType",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/brews/{brewType}/suds/{sudType}": {
      "get": {},
      "put": {},
      "parameters": [
        {
          "name": "sudType",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "brewType",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    }
  },
  "components": {
    "schemas": {
      "Beer": {
        "title": "Root Type for Beer",
        "description": "The root of the Beer type's schema.",
        "required": [],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "ibu": {
            "format": "int32",
            "type": "integer"
          },
          "brewery": {
            "format": "int32",
            "type": "integer"
          },
          "id": {
            "type": "string"
          }
        },
        "example": "{\n    \"name\": \"beer\",\n    \"description\": \"beer\",\n    \"ibu\": 17,\n    \"brewery\": 1\n}"
      },
      "Song": {},
      "Goose": {}
    }
  }
}