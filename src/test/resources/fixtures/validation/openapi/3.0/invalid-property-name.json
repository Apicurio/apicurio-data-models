{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "Swagger Petstore",
    "description": "A sample API that uses a petstore as an example to demonstrate features in the OpenAPI 3.0 specification",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "name": "Swagger API Team",
      "email": "apiteam@swagger.io",
      "url": "http://swagger.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "servers": [
    {
      "url": "http://petstore.swagger.io/api"
    }
  ],
  "paths": {
    "/enc-006": {
      "post": {
        "requestBody": {
          "content": {
            "multipart/mixed": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "address": {
                    "type": "object",
                    "properties": {
                    }
                  },
                  "historyMetadata": {
                    "description": "metadata in XML format",
                    "type": "object",
                    "properties": {
                    }
                  },
                  "profileImage": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "missingProperty": {
                  "contentType": "application/json"
                },
                "historyMetadata": {
                  "contentType": "application/xml; charset=utf-8"
                },
                "profileImage": {
                  "contentType": "image/png, image/jpeg",
                  "headers": {
                    "X-Rate-Limit-Limit": {
                      "description": "The number of allowed requests in the current period",
                      "schema": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A complex object array response"
          }
        }
      }
    },
    "/pets": {
      "get": {
        "description": "Returns all pets from the system that the user has access to\nNam sed condimentum est. Maecenas tempor sagittis sapien, nec rhoncus sem sagittis sit amet. Aenean at gravida augue, ac iaculis sem. Curabitur odio lorem, ornare eget elementum nec, cursus id lectus. Duis mi turpis, pulvinar ac eros ac, tincidunt varius justo. In hac habitasse platea dictumst. Integer at adipiscing ante, a sagittis ligula. Aenean pharetra tempor ante molestie imperdiet. Vivamus id aliquam diam. Cras quis velit non tortor eleifend sagittis. Praesent at enim pharetra urna volutpat venenatis eget eget mauris. In eleifend fermentum facilisis. Praesent enim enim, gravida ac sodales sed, placerat id erat. Suspendisse lacus dolor, consectetur non augue vel, vehicula interdum libero. Morbi euismod sagittis libero sed lacinia.\n\nSed tempus felis lobortis leo pulvinar rutrum. Nam mattis velit nisl, eu condimentum ligula luctus nec. Phasellus semper velit eget aliquet faucibus. In a mattis elit. Phasellus vel urna viverra, condimentum lorem id, rhoncus nibh. Ut pellentesque posuere elementum. Sed a varius odio. Morbi rhoncus ligula libero, vel eleifend nunc tristique vitae. Fusce et sem dui. Aenean nec scelerisque tortor. Fusce malesuada accumsan magna vel tempus. Quisque mollis felis eu dolor tristique, sit amet auctor felis gravida. Sed libero lorem, molestie sed nisl in, accumsan tempor nisi. Fusce sollicitudin massa ut lacinia mattis. Sed vel eleifend lorem. Pellentesque vitae felis pretium, pulvinar elit eu, euismod sapien.\n",
        "operationId": "findPets",
        "parameters": [
          {
            "name": "tags",
            "in": "query",
            "description": "tags to filter by",
            "required": false,
            "style": "form",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "maximum number of results to return",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "Success": {
            "description": "pet response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Creates a new pet in the store.  Duplicates are allowed",
        "operationId": "addPet",
        "requestBody": {
          "description": "Pet to add to the store",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewPet"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "pet response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "pets/{id}": {
      "get": {
        "description": "Returns a user based on a single ID, if the user does not have access to the pet",
        "operationId": "find pet by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of pet to fetch",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "pet response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "deletes a single pet based on the ID supplied",
        "operationId": "deletePet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of pet to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "pet deleted"
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/": {
      "get": {
        "description": "pathstest1 - root path (/) - valid",
        "responses": {
          "default": {
            "description": "..."
          }
        }
      }
    },
    "/1": {
      "get": {
        "description": "pathstest2 - path with single non-parameterized (numeric) segment (/1) - valid",
        "responses": {
          "default": {
            "description": "..."
          }
        }
      }
    },
    "/pathstest3": {
      "get": {
        "description": "pathstest3 - path with single non-parameterized (string) segment (/pathstest3) - valid",
        "responses": {
          "default": {
            "description": "..."
          }
        }
      }
    },
    "/pathstest4/": {
      "get": {
        "description": "pathstest4 - path with single non-parameterized segment with trailing slash (/pathstest4/) - valid",
        "responses": {
          "default": {
            "description": "..."
          }
        }
      }
    },
    "/pathstest5/{var}": {
      "get": {
        "description": "pathstest5 - path with single non-prefixed parameterized segment (/pathstest5/{var}) - valid",
        "parameters": [
          {
            "$ref": "#/components/parameters/var"
          }
        ],
        "responses": {
          "default": {
            "description": "..."
          }
        }
      }
    },
    "/pathstest6/{var}/": {
      "get": {
        "description": "pathstest6 - path with single non-prefixed parameterized segment with trailing slash (/pathstest6/{var}) - valid",
        "parameters": [
          {
            "$ref": "#/components/parameters/var"
          }
        ],
        "responses": {
          "default": {
            "description": "..."
          }
        }
      }
    },
    "/pathstest7{var}": {
      "get": {
        "description": "pathstest7 - path with single prefixed parameterized segment (/pathstest7{var}) - valid",
        "parameters": [
          {
            "$ref": "#/components/parameters/var"
          }
        ],
        "responses": {
          "default": {
            "description": "..."
          }
        }
      }
    },
    "/pathstest8{var}/": {
      "get": {
        "description": "pathstest8 - path with single prefixed parameterized segment with trailing slash (/pathstest8{var}/) - valid",
        "parameters": [
          {
            "$ref": "#/components/parameters/var"
          }
        ],
        "responses": {
          "default": {
            "description": "..."
          }
        }
      }
    },
    "/pathstest9/{var}": {
      "get": {
        "description": "pathstest9 - path with non-parameterized segment followed by a parameterized segment (/pathstest9/{var}) - valid",
        "parameters": [
          {
            "$ref": "#/components/parameters/var"
          }
        ],
        "responses": {
          "default": {
            "description": "..."
          }
        }
      }
    },
    "/{var}/pathstest10": {
      "get": {
        "description": "pathstest10 - path with parameterized segment followed by a non-parameterized segment (/{var}/pathstest10) - valid",
        "parameters": [
          {
            "$ref": "#/components/parameters/var"
          }
        ],
        "responses": {
          "default": {
            "description": "..."
          }
        }
      }
    },
    "//pathstest11": {
      "get": {
        "description": "pathstest11 - path with empty segment (//pathstest11) - invalid",
        "responses": {
          "default": {
            "description": "..."
          }
        }
      }
    },
    "pathstest12": {
      "get": {
        "description": "pathstest12 - path with single non-parameterized segment without leading slash (pathstest12) - invalid",
        "responses": {
          "default": {
            "description": "..."
          }
        }
      }
    },
    "{pathstest13}": {
      "get": {
        "description": "pathstest13 - path with single non-parameterized segment without leading slash ({pathstest13}) - invalid",
        "responses": {
          "default": {
            "description": "..."
          }
        }
      }
    },
    "/{{pathstest14}}": {
      "get": {
        "description": "pathstest14 - path segment with nested parameterized properties (/{{pathstest14}}) - invalid",
        "responses": {
          "default": {
            "description": "..."
          }
        }
      }
    },
    "/pathstest15/{var1}{var2}": {
      "get": {
        "description": "pathstest15 - path segment with multiple parameterized properties (/pathstest15/{var1}{var2}) - invalid",
        "parameters": [
          {
            "$ref": "#/components/parameters/var1"
          },
          {
            "$ref": "#/components/parameters/var2"
          }
        ],
        "responses": {
          "default": {
            "description": "..."
          }
        }
      }
    },
    "/pathstest16/{var": {
      "get": {
        "description": "pathstest16 - path segment with unbalanced left curly brace (/pathstest16/{var) - invalid",
        "responses": {
          "default": {
            "description": "..."
          }
        }
      }
    },
    "/pathstest17/var}": {
      "get": {
        "description": "pathstest17 - path segment with unbalanced right curly brace (/pathstest17/var}) - invalid",
        "responses": {
          "default": {
            "description": "..."
          }
        }
      }
    },
    "/pathstest18/{_var}": {
      "get": {
        "description": "pathstest18 - path with parameter name starting with an underscore (/pathstest18/{_var}) - valid",
        "parameters": [
          {
            "$ref": "#/components/parameters/_var"
          }
        ],
        "responses": {
          "default": {
            "description": "..."
          }
        }
      }
    },
    "/pathstest19/{1var}": {
      "get": {
        "description": "pathstest19 - path with parameter name starting with a digit (/pathstest19/{1var}) - invalid",
        "responses": {
          "default": {
            "description": "..."
          }
        }
      }
    },
    "/pathstest20/{v1ar_2}": {
      "get": {
        "description": "pathstest19 - path with parameter name containing a digit in second or later position with underscores (/pathstest20/{v1ar_2}) - valid",
        "parameters": [
          {
            "$ref": "#/components/parameters/v1ar_2"
          }
        ],
        "responses": {
          "default": {
            "description": "..."
          }
        }
      }
    },
    "/pathstest21/var{var}": {
      "get": {
        "description": "pathstest21 - path with same name used as prefix and parameter (/pathstest21/var{var}) - valid",
        "parameters": [
          {
            "$ref": "#/components/parameters/var"
          }
        ],
        "responses": {
          "default": {
            "description": "..."
          }
        }
      }
    },
    "/pathstest22/{var}/{var}": {
      "get": {
        "description": "pathstest22 - path with single duplicated parameter (/pathstest22/{var}/{var}) - invalid",
        "parameters": [
          {
            "$ref": "#/components/parameters/var"
          }
        ],
        "responses": {
          "default": {
            "description": "..."
          }
        }
      }
    },
    "/pathstest23/{var1}/{var2}/a{var2}/{var1}": {
      "get": {
        "description": "pathstest23 - path with multiple duplicated parameters (/pathstest23/{var1}/{var2/a{var2}/{var1}) - invalid",
        "parameters": [
          {
            "$ref": "#/components/parameters/var1"
          },
          {
            "$ref": "#/components/parameters/var2"
          }
        ],
        "responses": {
          "default": {
            "description": "..."
          }
        }
      }
    },
    "/pathstest24/var": {
      "get": {
        "description": "pathstest24 - two paths with same name used as prefix in one and parameter in another (/pathstest24/var) - valid",
        "responses": {
          "default": {
            "description": "..."
          }
        }
      }
    },
    "/pathstest24/{var}": {
      "get": {
        "description": "pathstest24 - two paths with same name used as prefix in one and parameter in another (/pathstest24/{var}) - valid",
        "parameters": [
          {
            "$ref": "#/components/parameters/var"
          }
        ],
        "responses": {
          "default": {
            "description": "..."
          }
        }
      }
    },
    "/pathstest25": {
      "get": {
        "description": "pathstest25 - non parameterized paths that vary only in trailing slash (/pathstest25) - invalid",
        "responses": {
          "default": {
            "description": "..."
          }
        }
      }
    },
    "/pathstest25/": {
      "get": {
        "description": "pathstest25 - non parameterized paths that vary only in trailing slash (/pathstest25/) - invalid",
        "responses": {
          "default": {
            "description": "..."
          }
        }
      }
    },
    "/pathstest26/{var}": {
      "get": {
        "description": "pathstest26 - parameterized paths that vary only in trailing slash (/pathstest26/{var}) - invalid",
        "parameters": [
          {
            "$ref": "#/components/parameters/var"
          }
        ],
        "responses": {
          "default": {
            "description": "..."
          }
        }
      }
    },
    "/pathstest26/{var}/": {
      "get": {
        "description": "pathstest26 - parameterized paths that vary only in trailing slash (/pathstest26/{var}/) - invalid",
        "parameters": [
          {
            "$ref": "#/components/parameters/var"
          }
        ],
        "responses": {
          "default": {
            "description": "..."
          }
        }
      }
    },
    "/pathstest27/{var1}": {
      "get": {
        "description": "pathstest27 - parameterized paths that vary only in formal parameter names (/pathstest27/{var1}) - See: OAS 3 - Path Template Matching - invalid",
        "parameters": [
          {
            "$ref": "#/components/parameters/var1"
          }
        ],
        "responses": {
          "default": {
            "description": "..."
          }
        }
      }
    },
    "/pathstest27/{var2}/": {
      "get": {
        "description": "pathstest27 - parameterized paths that vary only in formal parameter names (/pathstest27/{var2}) - See: OAS 3 - Path Template Matching - invalid",
        "parameters": [
          {
            "$ref": "#/components/parameters/var2"
          }
        ],
        "responses": {
          "default": {
            "description": "..."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Pet+Foo": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NewPet"
          },
          {
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ]
      },
      "Pet": {
        "type": "string"
      },
      "NewPet": {
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "tag": {
            "type": "string"
          }
        }
      },
      "Error": {
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    "responses": {
      "The Response": {}
    },
    "parameters": {
      "var": {
        "name":"var",
        "in":"path",
        "description":"Param in path",
        "required":true,
        "schema": {
          "type":"string"
        }
      },
      "_var": {
        "name":"_var",
        "in":"path",
        "description":"Param in path",
        "required":true,
        "schema": {
          "type":"string"
        }
      },
      "v1ar_2": {
        "name":"v1ar_2",
        "in":"path",
        "description":"Param in path",
        "required":true,
        "schema": {
          "type":"string"
        }
      },
      "var1": {
        "name":"var1",
        "in":"path",
        "description":"Param in path",
        "required":true,
        "schema": {
          "type":"string"
        }
      },
      "var2": {
        "name":"var2",
        "in":"path",
        "description":"Param in path",
        "required":true,
        "schema": {
          "type":"string"
        }
      },
      "Some$Parameter": {
        "$ref": "http://www.example.org/openapi.json#/components/parameters/FooParam"
      }
    },
    "examples": {
      "Example|1": {
        "$ref": "http://www.example.org/openapi.json#/components/examples/FooExample"
      }
    },
    "requestBodies": {
      "Request Body": {}
    },
    "headers": {
      "[Header]": {}
    },
    "securitySchemes": {
      "Security%Scheme": {
        "type": "http",
        "scheme": "basic"
      },
      "BasicAuth": {
        "type": "http",
        "scheme": "basic"
      }
    },
    "links": {
      "Link*Twelve": {}
    },
    "callbacks": {
      "Invalid Callback Name": {}
    }
  },
  "security": [
    {
      "BasicAuth": []
    },
    {
      "MissingAuth": []
    }
  ]
}
