{
    "swagger":"2.0",
    "info":{
        "description":"This is a sample server Petstore server via JSON.",
        "version":"1.0.0",
        "title":"Swagger Petstore (JSON)"
    },
    "paths":{
        "pet":{
            "post":{
                "tags":[
                    "pet"
                ],
                "summary":"Add a new pet to the store",
                "description":"",
                "operationId":"addPet",
                "consumes":[
                    "application/json",
                    "application/xml"
                ],
                "produces":[
                    "application/xml",
                    "application/json"
                ],
                "parameters":[
                    {
                        "in":"body",
                        "name":"body",
                        "description":"Pet object that needs to be added to the store",
                        "required":false,
                        "schema":{
                            "$ref":"#/definitions/Pet"
                        }
                    }
                ],
                "responses":{
                    "405":{
                        "description":"Invalid input"
                    }
                },
                "security":[
                    {
                        "petstore_auth":[
                            "write:pets",
                            "read:pets"
                        ]
                    }
                ]
            },
            "put":{
                "tags":[
                    "pet"
                ],
                "summary":"Update an existing pet",
                "description":"",
                "operationId":"updatePet",
                "consumes":[
                    "application/json",
                    "application/xml"
                ],
                "produces":[
                    "application/xml",
                    "application/json"
                ],
                "parameters":[
                    {
                        "in":"body",
                        "name":"body",
                        "description":"Pet object that needs to be added to the store",
                        "required":false,
                        "schema":{
                            "$ref":"#/definitions/Pet"
                        }
                    }
                ],
                "responses":{
                    "400":{
                        "description":"Invalid ID supplied"
                    },
                    "404":{
                        "description":"Pet not found"
                    },
                    "405":{
                        "description":"Validation exception"
                    }
                },
                "security":[
                    {
                        "petstore_auth":[
                            "write:pets",
                            "read:pets"
                        ]
                    }
                ]
            }
        },
        "pet/findByStatus":{
            "get":{
                "tags":[
                    "pet"
                ],
                "summary":"Finds Pets by status",
                "description":"Multiple status values can be provided with comma seperated strings",
                "operationId":"findPetsByStatus",
                "consumes":[
                    "application/xml",
                    "application/json",
                    "multipart/form-data",
                    "application/x-www-form-urlencoded"
                ],
                "produces":[
                    "application/xml",
                    "application/json"
                ],
                "parameters":[
                    {
                        "name":"status",
                        "in":"query",
                        "description":"Status values that need to be considered for filter",
                        "required":false,
                        "type":"array",
                        "items":{
                            "type":"string"
                        },
                        "collectionFormat":"multi",
                        "default":"available",
                        "enum":[
                            "available",
                            "pending",
                            "sold"
                        ]
                    }
                ],
                "responses":{
                    "200":{
                        "description":"successful operation",
                        "schema":{
                            "type":"array",
                            "items":{
                                "$ref":"#/definitions/Pet"
                            }
                        }
                    },
                    "400":{
                        "description":"Invalid status value"
                    }
                },
                "security":[
                    {
                        "petstore_auth":[
                            "write:pets",
                            "read:pets"
                        ]
                    }
                ]
            }
        },
        "/pet/findByTags":{
            "get":{
                "tags":[
                    "pet"
                ],
                "summary":"Finds Pets by tags",
                "description":"Muliple tags can be provided with comma seperated strings. Use tag1, tag2, tag3 for testing.",
                "operationId":"findPetsByTags",
                "produces":[
                    "application/xml",
                    "application/json"
                ],
                "parameters":[
                    {
                        "name":"tags",
                        "in":"query",
                        "description":"Tags to filter by",
                        "required":false,
                        "type":"array",
                        "items":{
                            "type":"string"
                        },
                        "collectionFormat":"multi"
                    }
                ],
                "responses":{
                    "487":{
                        "description":"Invalid tag value"
                    },
                    "822":{
                        "description":"successful operation",
                        "schema":{
                            "type":"array",
                            "items":{
                                "$ref":"#/definitions/Pet"
                            }
                        },
                        "examples": {
                            "application/json": {
                                "id" : 12345,
                                "name" : "SamplePet",
                                "photoUrls": [ "http://www.example.com/pictures/pet1.jpg" ]
                            },
                            "text/plain": "Hello World, this is invalid!"
                        }
                    }
                },
                "security":[
                    {
                        "petstore_auth":[
                            "write:pets",
                            "read:pets"
                        ]
                    }
                ]
            }
        },
        "/pathstest3": {
            "get": {
                "description": "pathstest3 - path with single non-parameterized (string) segment (/pathstest3) - valid",
                "responses": {
                    "default": {
                        "description": "..."
                    }
                }
            }
        },
        "/pathstest4/": {
            "get": {
                "description": "pathstest4 - path with single non-parameterized segment with trailing slash (/pathstest4/) - valid",
                "responses": {
                    "default": {
                        "description": "..."
                    }
                }
            }
        },
        "/pathstest5/{var}": {
            "get": {
                "description": "pathstest5 - path with single non-prefixed parameterized segment (/pathstest5/{var}) - valid",
                "responses": {
                    "default": {
                        "description": "..."
                    }
                }
            }
        },
        "/pathstest6/{var}/": {
            "get": {
                "description": "pathstest6 - path with single non-prefixed parameterized segment with trailing slash (/pathstest6/{var}) - valid",
                "responses": {
                    "default": {
                        "description": "..."
                    }
                }
            }
        },
        "/pathstest7{var}": {
            "get": {
                "description": "pathstest7 - path with single prefixed parameterized segment (/pathstest7{var}) - valid",
                "responses": {
                    "default": {
                        "description": "..."
                    }
                }
            }
        },
        "/pathstest8{var}/": {
            "get": {
                "description": "pathstest8 - path with single prefixed parameterized segment with trailing slash (/pathstest8{var}/) - valid",
                "responses": {
                    "default": {
                        "description": "..."
                    }
                }
            }
        },
        "/pathstest9/{var}": {
            "get": {
                "description": "pathstest9 - path with non-parameterized segment followed by a parameterized segment (/pathstest9/{var}) - valid",
                "responses": {
                    "default": {
                        "description": "..."
                    }
                }
            }
        },
        "/{var}/pathstest10": {
            "get": {
                "description": "pathstest10 - path with parameterized segment followed by a non-parameterized segment (/{var}/pathstest10) - valid",
                "responses": {
                    "default": {
                        "description": "..."
                    }
                }
            }
        },
        "//pathstest11": {
            "get": {
                "description": "pathstest11 - path with empty segment (//pathstest11) - invalid",
                "responses": {
                    "default": {
                        "description": "..."
                    }
                }
            }
        },
        "pathstest12": {
            "get": {
                "description": "pathstest12 - path with single non-parameterized segment without leading slash (pathstest12) - invalid",
                "responses": {
                    "default": {
                        "description": "..."
                    }
                }
            }
        },
        "{pathstest13}": {
            "get": {
                "description": "pathstest13 - path with single non-parameterized segment without leading slash ({pathstest13}) - invalid",
                "responses": {
                    "default": {
                        "description": "..."
                    }
                }
            }
        },
        "/{{pathstest14}}": {
            "get": {
                "description": "pathstest14 - path segment with nested parameterized properties (/{{pathstest14}}) - invalid",
                "responses": {
                    "default": {
                        "description": "..."
                    }
                }
            }
        },
        "/pathstest15/{var1}{var2}": {
            "get": {
                "description": "pathstest15 - path segment with multiple parameterized properties (/pathstest15/{var1}{var2}) - invalid",
                "responses": {
                    "default": {
                        "description": "..."
                    }
                }
            }
        },
        "/pathstest16/{var": {
            "get": {
                "description": "pathstest16 - path segment with unbalanced left curly brace (/pathstest16/{var) - invalid",
                "responses": {
                    "default": {
                        "description": "..."
                    }
                }
            }
        },
        "/pathstest17/var}": {
            "get": {
                "description": "pathstest17 - path segment with unbalanced right curly brace (/pathstest17/var}) - invalid",
                "responses": {
                    "default": {
                        "description": "..."
                    }
                }
            }
        },
        "/pathstest18/{_var}": {
            "get": {
                "description": "pathstest18 - path with parameter name starting with an underscore (/pathstest18/{_var}) - valid",
                "responses": {
                    "default": {
                        "description": "..."
                    }
                }
            }
        },
        "/pathstest19/{1var}": {
            "get": {
                "description": "pathstest19 - path with parameter name starting with a digit (/pathstest19/{1var}) - invalid",
                "responses": {
                    "default": {
                        "description": "..."
                    }
                }
            }
        },
        "/pathstest20/{v1ar_2}": {
            "get": {
                "description": "pathstest19 - path with parameter name containing a digit in second or later position with underscores (/pathstest20/{v1ar_2}) - valid",
                "responses": {
                    "default": {
                        "description": "..."
                    }
                }
            }
        },
        "/pathstest21/var{var}": {
            "get": {
                "description": "pathstest21 - path with same name used as prefix and parameter (/pathstest21/var{var}) - valid",
                "responses": {
                    "default": {
                        "description": "..."
                    }
                }
            }
        },
        "/pathstest22/{var}/{var}": {
            "get": {
                "description": "pathstest22 - path with single duplicated parameter (/pathstest22/{var}/{var}) - invalid",
                "responses": {
                    "default": {
                        "description": "..."
                    }
                }
            }
        },
        "/pathstest23/{var1}/{var2}/a{var2}/{var1}": {
            "get": {
                "description": "pathstest23 - path with multiple duplicated parameters (/pathstest23/{var1}/{var2/a{var2}/{var1}) - invalid",
                "responses": {
                    "default": {
                        "description": "..."
                    }
                }
            }
        },
        "/pathstest24/var": {
            "get": {
                "description": "pathstest24 - two paths with same name used as prefix in one and parameter in another (/pathstest24/var) - valid",
                "responses": {
                    "default": {
                        "description": "..."
                    }
                }
            }
        },
        "/pathstest24/{var}": {
            "get": {
                "description": "pathstest24 - two paths with same name used as prefix in one and parameter in another (/pathstest24/{var}) - valid",
                "responses": {
                    "default": {
                        "description": "..."
                    }
                }
            }
        },
        "/pathstest25": {
            "get": {
                "description": "pathstest25 - non parameterized paths that vary only in trailing slash (/pathstest25) - invalid",
                "responses": {
                    "default": {
                        "description": "..."
                    }
                }
            }
        },
        "/pathstest25/": {
            "get": {
                "description": "pathstest25 - non parameterized paths that vary only in trailing slash (/pathstest25/) - invalid",
                "responses": {
                    "default": {
                        "description": "..."
                    }
                }
            }
        },
        "/pathstest26/{var}": {
            "get": {
                "description": "pathstest26 - parameterized paths that vary only in trailing slash (/pathstest26/{var}) - invalid",
                "responses": {
                    "default": {
                        "description": "..."
                    }
                }
            }
        },
        "/pathstest26/{var}/": {
            "get": {
                "description": "pathstest26 - parameterized paths that vary only in trailing slash (/pathstest26/{var}/) - invalid",
                "responses": {
                    "default": {
                        "description": "..."
                    }
                }
            }
        },
        "/pathstest27/{var1}": {
            "get": {
                "description": "pathstest27 - parameterized paths that vary only in formal parameter names (/pathstest27/{var1}) - See: OAS 3 - Path Template Matching - invalid",
                "responses": {
                    "default": {
                        "description": "..."
                    }
                }
            }
        },
        "/pathstest27/{var2}/": {
            "get": {
                "description": "pathstest27 - parameterized paths that vary only in formal parameter names (/pathstest27/{var2}) - See: OAS 3 - Path Template Matching - invalid",
                "responses": {
                    "default": {
                        "description": "..."
                    }
                }
            }
        }
    },
    "securityDefinitions":{
        "petstore_auth":{
            "type":"oauth2",
            "authorizationUrl":"http://petstore.swagger.io/api/oauth/dialog",
            "flow":"implicit",
            "scopes":{
                "write:pets":"modify pets in your account",
                "read:pets":"read your pets"
            }
        },
        "api_key":{
            "type":"apiKey",
            "name":"api_key",
            "in":"header"
        }
    },
    "definitions":{
        "Order":{
            "properties":{
                "id":{
                    "type":"integer",
                    "format":"int64"
                },
                "petId":{
                    "type":"integer",
                    "format":"int64"
                },
                "quantity":{
                    "type":"integer",
                    "format":"int32"
                },
                "shipDate":{
                    "type":"string",
                    "format":"date-time"
                },
                "status":{
                    "type":"string",
                    "description":"Order Status",
                    "enum":[
                        "placed",
                        "approved",
                        "delivered"
                    ]
                },
                "complete":{
                    "type":"boolean"
                }
            },
            "xml":{
                "name":"Order"
            }
        },
        "Category":{
            "properties":{
                "id":{
                    "type":"integer",
                    "format":"int64"
                },
                "name":{
                    "type":"string"
                }
            },
            "xml":{
                "name":"Category"
            }
        },
        "User":{
            "properties":{
                "id":{
                    "type":"integer",
                    "format":"int64"
                },
                "username":{
                    "type":"string"
                },
                "firstName":{
                    "type":"string"
                },
                "lastName":{
                    "type":"string"
                },
                "email":{
                    "type":"string"
                },
                "password":{
                    "type":"string"
                },
                "phone":{
                    "type":"string"
                },
                "userStatus":{
                    "type":"integer",
                    "format":"int32",
                    "description":"User Status"
                }
            },
            "xml":{
                "name":"User"
            }
        },
        "Tag":{
            "properties":{
                "id":{
                    "type":"integer",
                    "format":"int64"
                },
                "name":{
                    "type":"string"
                }
            },
            "xml":{
                "name":"Tag"
            }
        },
        "Pet":{
            "required":[
                "name",
                "photoUrls"
            ],
            "properties":{
                "id":{
                    "type":"integer",
                    "format":"int64"
                },
                "category":{
                    "$ref":"#/definitions/Category"
                },
                "name":{
                    "type":"string",
                    "example":"doggie"
                },
                "photoUrls":{
                    "type":"array",
                    "xml":{
                        "name":"photoUrl",
                        "wrapped":true
                    },
                    "items":{
                        "type":"string"
                    }
                },
                "tags":{
                    "type":"array",
                    "xml":{
                        "name":"tag",
                        "wrapped":true
                    },
                    "items":{
                        "$ref":"#/definitions/Tag"
                    }
                },
                "status":{
                    "type":"string",
                    "description":"pet status in the store",
                    "enum":[
                        "available",
                        "pending",
                        "sold"
                    ]
                }
            },
            "xml":{
                "name":"Pet"
            }
        },
        "ApiResponse":{
            "properties":{
                "code":{
                    "type":"integer",
                    "format":"int32"
                },
                "type":{
                    "type":"string"
                },
                "message":{
                    "type":"string"
                }
            },
            "xml":{
                "name":"##default"
            }
        }
    },
    "externalDocs":{
        "description":"Find out more about Swagger",
        "url":"http://swagger.io"
    }
}